// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'data/database/branch.dart';
import 'data/database/company.dart';
import 'data/database/coupon.dart';
import 'data/database/customer.dart';
import 'data/database/database.dart';
import 'data/database/discount_program.dart';
import 'data/database/driver.dart';
import 'data/database/extra.dart';
import 'data/database/floor.dart';
import 'data/database/key_type.dart';
import 'data/database/line.dart';
import 'data/database/note.dart';
import 'data/database/order.dart';
import 'data/database/pay.dart';
import 'data/database/payment_method.dart';
import 'data/database/pos.dart';
import 'data/database/pos_category.dart';
import 'data/database/pos_data.dart';
import 'data/database/pos_group.dart';
import 'data/database/pos_multi_session.dart';
import 'data/database/pos_order_type.dart';
import 'data/database/pos_security_role.dart';
import 'data/database/pos_type.dart';
import 'data/database/price_list.dart';
import 'data/database/product.dart';
import 'data/database/product_category.dart';
import 'data/database/product_note.dart';
import 'data/database/promotion.dart';
import 'data/database/restaurant_printer.dart';
import 'data/database/return_reason.dart';
import 'data/database/scrap_reason.dart';
import 'data/database/session.dart';
import 'data/database/table.dart';
import 'data/database/tax.dart';
import 'data/database/user.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(2, 9024327669641363524),
      name: 'Company',
      lastPropertyId: const IdUid(16, 4839774720259902161),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2066216480838456092),
            name: 'odooId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(2, 8513279096095913292),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(3, 4518989589656305075),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4196377568557036454),
            name: 'image',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2742096222324883559),
            name: 'phone',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 778679540650008460),
            name: 'mobile',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 1054625503268575692),
            name: 'email',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 5854155332303388466),
            name: 'street',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 4569830133090914794),
            name: 'street2',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 3714411490511975689),
            name: 'city',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 1790119668493218149),
            name: 'stateId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 804282234107178780),
            name: 'zip',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 5000734908575781477),
            name: 'companyRegistry',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 3649252685421341509),
            name: 'vat',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 6276425448208188261),
            name: 'currencyId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 4839774720259902161),
            name: 'gotBranches',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 7672986459580020927),
      name: 'Coupon',
      lastPropertyId: const IdUid(21, 519696998528384024),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4900196860236283959),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3712013194454526094),
            name: 'odooId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 317232802563252166),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8600971839125253494),
            name: 'productId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3585328635735077661),
            name: 'active',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4509078399405854825),
            name: 'couponApplyTimes',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 834383831295023015),
            name: 'appliedApp',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 7736786149957750350),
            name: 'cBarcode',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 8004449650245257997),
            name: 'amountType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 8127115772430450340),
            name: 'applyCouponOn',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 3698696597204227038),
            name: 'issueDate',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 5194767027437570608),
            name: 'expDatShow',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 3141468934692084554),
            name: 'expiryDate',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 5580558730906515718),
            name: 'amount',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 2259466907070910895),
            name: 'partnerTrue',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 5132222960201291101),
            name: 'partnerId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 198013658132808407),
            name: 'isCateg',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(18, 6543107725496096213),
            name: 'categIds',
            type: 23,
            flags: 0),
        ModelProperty(
            id: const IdUid(19, 2776524173796732126),
            name: 'maxAmount',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(20, 7242145706908812694),
            name: 'couponDesc',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(21, 519696998528384024),
            name: 'description',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(4, 6380781871074420691),
      name: 'Customer',
      lastPropertyId: const IdUid(19, 227399422731686332),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7593120111342602729),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 247133797465457645),
            name: 'odooId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5050190435435982727),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8971840003584724837),
            name: 'image1920',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4585349688524445705),
            name: 'street',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 3498176596309063782),
            name: 'street2',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 2702503850010762084),
            name: 'city',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 7078379299247323125),
            name: 'stateId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 8354889726796478231),
            name: 'zip',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 3192986723459575464),
            name: 'countryId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 7391095447830733848),
            name: 'vat',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 326652963856884596),
            name: 'branchId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 1412287658915588077),
            name: 'phone',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 4775062701460400905),
            name: 'mobile',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 2889572740440735200),
            name: 'email',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 7352900768096090073),
            name: 'website',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 3493065415061325223),
            name: 'categoryId',
            type: 23,
            flags: 0),
        ModelProperty(
            id: const IdUid(18, 2828185682121599454),
            name: 'companyId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(19, 227399422731686332),
            name: 'posTotalAmount',
            type: 8,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(5, 7824578982411565595),
      name: 'Database',
      lastPropertyId: const IdUid(2, 6279407954318155534),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2049387617706913350),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6279407954318155534),
            name: 'name',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(6, 3475044038518667595),
      name: 'DiscountCategoryIds',
      lastPropertyId: const IdUid(5, 4057826600982943684),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8225009575103019417),
            name: 'odooId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(2, 5052516058727645525),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(3, 9084728821566345758),
            name: 'categoryId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3113253829700433304),
            name: 'discount',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4057826600982943684),
            name: 'promotionId',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(7, 9218400853723238674),
      name: 'DiscountProgram',
      lastPropertyId: const IdUid(9, 8287596309065486662),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3361663414271905162),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6040292180362971937),
            name: 'odooId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8646781596338757060),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6892097423175617489),
            name: 'discountType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7339403880415874370),
            name: 'requireCustomer',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7640125095452142953),
            name: 'customerRestricted',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 8281909128127342630),
            name: 'amount',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 1054283285030305218),
            name: 'posCategoryIds',
            type: 23,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 8287596309065486662),
            name: 'posApplied',
            type: 23,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(8, 3867842033752402225),
      name: 'Driver',
      lastPropertyId: const IdUid(6, 2033961980367621850),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1721826332568981393),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1432006575633578993),
            name: 'odooId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 87610439482341243),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8010891961941908759),
            name: 'code',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6516867598116151019),
            name: 'active',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 2033961980367621850),
            name: 'companyId',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(9, 825932661506109061),
      name: 'Extra',
      lastPropertyId: const IdUid(6, 1611170993033723913),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5565593196445102774),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2925281287794996926),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4338262780523472331),
            name: 'price',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1032665670436714782),
            name: 'isSelected',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6028126025889753685),
            name: 'productId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 1611170993033723913),
            name: 'lineId',
            type: 11,
            flags: 520,
            indexId: const IdUid(3, 7920618925921667037),
            relationTarget: 'Line')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(10, 2876691506344300871),
      name: 'Floor',
      lastPropertyId: const IdUid(9, 8976633160890127879),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1184529804139289693),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8564149486152685310),
            name: 'odooId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7967763566897368774),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6470056499339158631),
            name: 'posConfigId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1712343435841005714),
            name: 'pricelistId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4350630236816166122),
            name: 'backgroundColor',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 4438304694638531230),
            name: 'width',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 527530234124693069),
            name: 'height',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 8976633160890127879),
            name: 'gotRatio',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'tableIds', srcEntity: 'TableId', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(11, 4903370979855627356),
      name: 'ItemId',
      lastPropertyId: const IdUid(8, 2274832533863464674),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3708528791239447971),
            name: 'odooId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(2, 8343054190823458698),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(3, 8671299574585264570),
            name: 'productTmplId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4724516032798017899),
            name: 'productId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2318266751014194135),
            name: 'minQuantity',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 585528194831366053),
            name: 'fixedPrice',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 420747197085601006),
            name: 'dateStart',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 2274832533863464674),
            name: 'dateEnd',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(12, 4536198814246988331),
      name: 'JournalID',
      lastPropertyId: const IdUid(3, 4882118169227547583),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5234317632824648963),
            name: 'odooId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(2, 7406397521629744824),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(3, 4882118169227547583),
            name: 'name',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(13, 7423031734425224097),
      name: 'KeyType',
      lastPropertyId: const IdUid(3, 8875977594917809867),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2339450446266961493),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4706383983730483903),
            name: 'odooId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8875977594917809867),
            name: 'name',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(14, 3441777327574855210),
      name: 'Line',
      lastPropertyId: const IdUid(10, 8910609037249905608),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1131197654659331565),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1612581737380908019),
            name: 'productId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1161491913421639204),
            name: 'fullProductName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 901722144580687014),
            name: 'qty',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4321307891176824329),
            name: 'priceUnit',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 598717877517413746),
            name: 'priceSubtotal',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 3922525653814662417),
            name: 'priceSubtotalIncl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 5763961522298550106),
            name: 'orderId',
            type: 11,
            flags: 520,
            indexId: const IdUid(4, 7492942814422174723),
            relationTarget: 'Order1'),
        ModelProperty(
            id: const IdUid(9, 7524391824197973583),
            name: 'gotDataOnce',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 8910609037249905608),
            name: 'productOBid',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'extras', srcEntity: 'Extra', srcField: ''),
        ModelBacklink(name: 'notes', srcEntity: 'Note', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(15, 4361373724557918662),
      name: 'Note',
      lastPropertyId: const IdUid(4, 8955084637010566428),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5292968850882420740),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(2, 812126216872811171),
            name: 'isSelected',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6423752639556962519),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(4, 8955084637010566428),
            name: 'lineId',
            type: 11,
            flags: 520,
            indexId: const IdUid(5, 4085341010932087277),
            relationTarget: 'Line')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(16, 1528327212007683781),
      name: 'Order1',
      lastPropertyId: const IdUid(24, 6624927878728979332),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4743733236676968092),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1060528985936751360),
            name: 'mobileRef',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4071984001655068009),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 894735816971037110),
            name: 'sessionId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1013094590621486519),
            name: 'userId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 6934202707319245887),
            name: 'amountTax',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 6843999347812072246),
            name: 'amountTotal',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 4355925163548471528),
            name: 'amountPaid',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 6559680720295476149),
            name: 'amountReturn',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 2231313633880758491),
            name: 'orderTypeId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 4589457068593266262),
            name: 'note',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 1049223725817600659),
            name: 'couponId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 8094162262536106635),
            name: 'returnReasonId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 4251602702438136707),
            name: 'branchId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 880268576686433928),
            name: 'posReference',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 6841975789552721792),
            name: 'pricelistId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 6057421563811165427),
            name: 'time',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(18, 1331215961346364031),
            name: 'orderType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(19, 8881125978277242159),
            name: 'date',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(20, 2471989279715419922),
            name: 'customerId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(21, 4559195434568182764),
            name: 'tableId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(22, 78439467085202457),
            name: 'floorId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(23, 5351413012863291879),
            name: 'posId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(24, 6624927878728979332),
            name: 'orderNum',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'lines', srcEntity: 'Line', srcField: ''),
        ModelBacklink(name: 'payments', srcEntity: 'Pay', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(17, 8840503889466945014),
      name: 'POS',
      lastPropertyId: const IdUid(9, 2646433950244503944),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 284413537014159466),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2121852085871645397),
            name: 'odooId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 9205548534800464941),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2905663162604554018),
            name: 'userIds',
            type: 23,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 910679356113405932),
            name: 'posTypeId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 9073880818799346318),
            name: 'ifaceTaxIncluded',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 2646433950244503944),
            name: 'branchId',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(18, 1294109508466063864),
      name: 'POSCategory',
      lastPropertyId: const IdUid(11, 721256575970450492),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4596618676242243310),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 472378329018582978),
            name: 'odooId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8647791140820264840),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4863451373897126494),
            name: 'image128',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7234707956074065884),
            name: 'parentId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 6742432428054641490),
            name: 'sequence',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 3587585951309465554),
            name: 'excludePosIds',
            type: 23,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 6467545512506602365),
            name: 'restaurantPrinterIds',
            type: 23,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 3436855530963719433),
            name: 'invisibleInUi',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 8953605448520210023),
            name: 'websiteImage1920',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 721256575970450492),
            name: 'isPublished',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(19, 58517091866512158),
      name: 'POSData',
      lastPropertyId: const IdUid(27, 4871457205086424376),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8679608304954900551),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5477963573013948757),
            name: 'odooId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6383335867492643648),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6561624253576618744),
            name: 'posTypeId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5656525337285201312),
            name: 'isProductCaloriesActive',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 5285001566044368211),
            name: 'header',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 458941275930395626),
            name: 'footer',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 7182022734067458587),
            name: 'discountProgramActive',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 2990698163224127331),
            name: 'discountProgramProductId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 85953635820367873),
            name: 'allowPinCode',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 4312745536856907279),
            name: 'pinCode',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 2099172342308344286),
            name: 'orderTypeActive',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 6443540374279287451),
            name: 'defaultTypeOrderType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 6629960201607951265),
            name: 'pricelistId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 5302305480639750094),
            name: 'ifaceTaxIncluded',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 6596225970291741736),
            name: 'manualDiscount',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 8984537300388386575),
            name: 'restrictPriceControl',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(18, 2485939770127468937),
            name: 'usePricelist',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(19, 1093818676837800647),
            name: 'modulePosDiscount',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(20, 1719638845822645629),
            name: 'discountProductId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(21, 5149574660135206281),
            name: 'discountPc',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(22, 2587879321592366007),
            name: 'allowSplitTable',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(23, 7354803056663731794),
            name: 'allowTransferTable',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(24, 4389394420399782950),
            name: 'branchId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(25, 5882238963080605038),
            name: 'modulePosRestaurant',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(26, 3170648831042248881),
            name: 'isOrderPrinter',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(27, 4871457205086424376),
            name: 'companyId',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(20, 5926806013271986894),
      name: 'POSGroup',
      lastPropertyId: const IdUid(6, 7064615385639298522),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2390465580479040922),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 959399203889913911),
            name: 'odooId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4218877877169808192),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7089168237930695505),
            name: 'posRoleIds',
            type: 23,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 999627095423183448),
            name: 'posUserIds',
            type: 23,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7064615385639298522),
            name: 'companyId',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(21, 11042651311939605),
      name: 'POSMultiSession',
      lastPropertyId: const IdUid(10, 2876028804081364919),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5511424673395790692),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6667194880283824508),
            name: 'odooId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4944154299695481223),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1700361811992789479),
            name: 'posIds',
            type: 23,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6704178674246617890),
            name: 'floorIds',
            type: 23,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7646884558501701055),
            name: 'tableBlocking',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 8761254283279231087),
            name: 'multiSessionActive',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 1526114701643652962),
            name: 'syncServer',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 1387424624299368211),
            name: 'fiscalPositionIds',
            type: 23,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 2876028804081364919),
            name: 'companyId',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(22, 3380963973142002172),
      name: 'POSOrderType',
      lastPropertyId: const IdUid(14, 4195610944679227188),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 432153607160981243),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 54210274189168804),
            name: 'odooId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6425939511000929439),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3105032934982797968),
            name: 'isShowCustomerInfo',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3861663575031407953),
            name: 'isRequireInformation',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 787248204240615678),
            name: 'isRequireDriver',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 1034661972953837963),
            name: 'isAutoOpenTableScreen',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 2083240516745155671),
            name: 'pricelistId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 1443223824469759633),
            name: 'type',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 5074346881796880043),
            name: 'delivaryProductId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 7762179165077635319),
            name: 'extraProductId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 6967963315342383231),
            name: 'extraPercentage',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 4334869919090115598),
            name: 'companyId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 4195610944679227188),
            name: 'paymentMethodIds',
            type: 23,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(23, 1943524359236879711),
      name: 'POSSecurityRole',
      lastPropertyId: const IdUid(7, 1324119438847606995),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2303722787253581618),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5970299064493117318),
            name: 'odooId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7163665236929457904),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8558616494258867264),
            name: 'desc',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3323507884552977834),
            name: 'keyId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7440520665895029335),
            name: 'isDefaultValue',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 1324119438847606995),
            name: 'companyId',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(24, 51509541196880283),
      name: 'POSType',
      lastPropertyId: const IdUid(3, 2550078177740593615),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7754964580834620934),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1943693097175931172),
            name: 'odooId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2550078177740593615),
            name: 'name',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(25, 5475639114457593717),
      name: 'Pay',
      lastPropertyId: const IdUid(10, 5786443300408041592),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2577563949201734701),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7105219182147777287),
            name: 'odooId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4009448723380790578),
            name: 'cash',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8899061843648237704),
            name: 'bank',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8391110230724249817),
            name: 'others',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 6626974597055955426),
            name: 'money',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 6263876335948951470),
            name: 'change',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 2692310732377902524),
            name: 'aquirded',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 8826303826372704503),
            name: 'type',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 5786443300408041592),
            name: 'orderId',
            type: 11,
            flags: 520,
            indexId: const IdUid(7, 2451692445497191820),
            relationTarget: 'Order1')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(26, 5779187558387619728),
      name: 'PaymentMethod',
      lastPropertyId: const IdUid(7, 495376136116877332),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2238915629279197530),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1885321750772144920),
            name: 'odooId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8333676608382868536),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 9064534241899546335),
            name: 'methodType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4475186020844710965),
            name: 'identifyCustomer',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 29678595366968560),
            name: 'jornalName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 495376136116877332),
            name: 'odooJournalIDFromdb',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(27, 5524717363982835433),
      name: 'PriceList',
      lastPropertyId: const IdUid(7, 1308936087451810248),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6653573182086346408),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 362721357501695163),
            name: 'odooId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 174274202466782057),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4373192658686622391),
            name: 'countryGroupIds',
            type: 23,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 595864627745841557),
            name: 'websiteId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8182524568775952504),
            name: 'selectable',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 1308936087451810248),
            name: 'code',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(28, 1569558109430115122),
      name: 'Product',
      lastPropertyId: const IdUid(35, 4005642274667512899),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1265440540060540610),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7625073688626831316),
            name: 'odooId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5186251934084353294),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5491114759995018940),
            name: 'image1920',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5364536098370307139),
            name: 'saleOk',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 6719980061867508145),
            name: 'purchaseOk',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 9155407392554101407),
            name: 'detailedType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 4294204079888144371),
            name: 'invoicePolicy',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 4485437437205545542),
            name: 'listPrice',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 3890840122242620834),
            name: 'taxesId',
            type: 23,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 2290611270025392090),
            name: 'standardPrice',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 4691609679515429175),
            name: 'defaultCode',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 5082607009582531360),
            name: 'barcode',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 8335570914196935627),
            name: 'categId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 5815491941948913496),
            name: 'companyId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 2008436058883187859),
            name: 'branchId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 6277902440183623341),
            name: 'accessoryProductIds',
            type: 23,
            flags: 0),
        ModelProperty(
            id: const IdUid(18, 8111633234257576182),
            name: 'alternativeProductIds',
            type: 23,
            flags: 0),
        ModelProperty(
            id: const IdUid(19, 63504939509384624),
            name: 'availableInPos',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(20, 161740364433928224),
            name: 'invisibleInUi',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(21, 525706786141421476),
            name: 'toWeight',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(22, 3202813830412837519),
            name: 'posCategId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(23, 3743992128012239374),
            name: 'websiteId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(24, 2545236859390203510),
            name: 'websiteSequence',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(25, 6460421077253967191),
            name: 'publicCategIds',
            type: 23,
            flags: 0),
        ModelProperty(
            id: const IdUid(26, 4138947947716856623),
            name: 'websiteRibbonId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(27, 8521245506794278021),
            name: 'weight',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(28, 6668458409611913287),
            name: 'volume',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(29, 1736894103741618443),
            name: 'saleDelay',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(30, 38907271111040399),
            name: 'propertyAccountCreditorPriceDifference',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(31, 4827437398714464619),
            name: 'propertyAccountExpenseId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(32, 8363447130978617101),
            name: 'propertyAccountIncomeId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(33, 538099186564204202),
            name: 'isDiscount',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(34, 8629746452824885336),
            name: 'isExtra',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(35, 4005642274667512899),
            name: 'extraProducts',
            type: 23,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(29, 8339043477248940761),
      name: 'ProductCategory',
      lastPropertyId: const IdUid(13, 6088979850780785085),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7644683062260647101),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 181320083206973860),
            name: 'odooId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1677313442235488905),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 898636369160457181),
            name: 'parentId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7607677479880523962),
            name: 'removalStrategyId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4971915740636987015),
            name: 'propertyCostMethod',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 1026157951905843130),
            name: 'propertyValuation',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 3461884730308371892),
            name: 'propertyAccountCreditorPriceDifferenceCateg',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 6454933040499193361),
            name: 'propertyAccountExpenseCategId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 6012448018334526501),
            name: 'propertyAccountIncomeCategId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 3830551858431856660),
            name: 'propertyStockAccountInputCategId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 7016435430826135081),
            name: 'propertyStockAccountOutputCategId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 6088979850780785085),
            name: 'propertyStockValuationAccountId',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(30, 6001674158981104648),
      name: 'ProductNote',
      lastPropertyId: const IdUid(4, 8798815135405388332),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5693818902371776663),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 530005976715826082),
            name: 'odooId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1629340991775600797),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8798815135405388332),
            name: 'posCategoryIds',
            type: 23,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(31, 1131014337286658690),
      name: 'Promotion',
      lastPropertyId: const IdUid(42, 9192483372957162490),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3371566114367858201),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 642195377848938732),
            name: 'odooId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8862192454237207661),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4719073955330250812),
            name: 'active',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8539077489769911038),
            name: 'startDate',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8912627900857838310),
            name: 'endDate',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 1366777725627523513),
            name: 'amountTotal',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 6717997288775218558),
            name: 'type',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 7817069100867985816),
            name: 'method',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 7115740533012876768),
            name: 'discountFirstOrder',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 2119204104043596921),
            name: 'productId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 4653129254141596672),
            name: 'discountOrderIds',
            type: 23,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 132060916739498024),
            name: 'discountEcommerceCategoryIds',
            type: 23,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 5295620140584573189),
            name: 'discountQuantityIds',
            type: 23,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 542624161064873812),
            name: 'giftConditionIds',
            type: 23,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 3697278488584623151),
            name: 'giftFreeIds',
            type: 23,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 2071525644339608248),
            name: 'discountConditionIds',
            type: 23,
            flags: 0),
        ModelProperty(
            id: const IdUid(18, 6609635184876883281),
            name: 'discountApplyIds',
            type: 23,
            flags: 0),
        ModelProperty(
            id: const IdUid(19, 7082397050277560551),
            name: 'priceIds',
            type: 23,
            flags: 0),
        ModelProperty(
            id: const IdUid(20, 7058850145436686064),
            name: 'specialCategoryIds',
            type: 23,
            flags: 0),
        ModelProperty(
            id: const IdUid(21, 9129299460446847114),
            name: 'discountLowestPrice',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(22, 4767283981404201922),
            name: 'multiBuyIds',
            type: 23,
            flags: 0),
        ModelProperty(
            id: const IdUid(23, 707227483812654541),
            name: 'productIds',
            type: 23,
            flags: 0),
        ModelProperty(
            id: const IdUid(24, 6146088680924852078),
            name: 'minimumItems',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(25, 2373871680869734600),
            name: 'specialCustomerIds',
            type: 23,
            flags: 0),
        ModelProperty(
            id: const IdUid(26, 1967843591210980465),
            name: 'promotionBirthday',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(27, 7021188403374358650),
            name: 'promotionBirthdayType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(28, 1665354650574767242),
            name: 'promotionGroup',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(29, 4189383507689306139),
            name: 'promotionGroupIds',
            type: 23,
            flags: 0),
        ModelProperty(
            id: const IdUid(30, 6884383251344369174),
            name: 'state',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(31, 2174856681770282430),
            name: 'specialDays',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(32, 8647236719410540317),
            name: 'monday',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(33, 5626400999808530117),
            name: 'tuesday',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(34, 8840772946118721373),
            name: 'wednesday',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(35, 8558760103695003060),
            name: 'thursday',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(36, 6418394001634986787),
            name: 'friday',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(37, 8190478969710242731),
            name: 'saturday',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(38, 3666006854281003219),
            name: 'sunday',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(39, 3993252234782213419),
            name: 'specialTimes',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(40, 5302499248897155101),
            name: 'fromTime',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(41, 2272330597043979025),
            name: 'toTime',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(42, 9192483372957162490),
            name: 'branchId',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(32, 3328230934810087528),
      name: 'RestaurantPrinter',
      lastPropertyId: const IdUid(9, 1800115937875079478),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 594805648178739266),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8250979397061390286),
            name: 'odooId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1326502150788235713),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8903103617593941649),
            name: 'printerType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7542081918296114320),
            name: 'proxyIp',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8818931674487872742),
            name: 'epsonPrinterIp',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 3220776296376558117),
            name: 'posOrderTypeIds',
            type: 23,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 3775238233151522761),
            name: 'posConfigIds',
            type: 23,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 1800115937875079478),
            name: 'productCategoriesIds',
            type: 23,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(33, 105244386116254013),
      name: 'ReturnReason',
      lastPropertyId: const IdUid(4, 7010805682206032582),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4708314171176636920),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3473394162111961342),
            name: 'odooId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8509713811970121579),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7010805682206032582),
            name: 'companyName',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(34, 3020044432628232136),
      name: 'ScrapReasons',
      lastPropertyId: const IdUid(4, 235653032729182777),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6459884576188989614),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4110446581890976873),
            name: 'odooId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6932396328769524986),
            name: 'shortName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 235653032729182777),
            name: 'desc',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(35, 5181812646250473578),
      name: 'Table',
      lastPropertyId: const IdUid(7, 6653094940108472255),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6062713460789143566),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3520495270827976312),
            name: 'odooId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2835600991738306970),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1825561561618408572),
            name: 'seats',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7859012558424567796),
            name: 'floorId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 6915865771234107630),
            name: 'locked',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 6653094940108472255),
            name: 'shape',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(36, 7592726311710866803),
      name: 'TableId',
      lastPropertyId: const IdUid(17, 3309095694235259246),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5597104919149921124),
            name: 'odooId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(2, 6569965331464949825),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(3, 4512840748177727866),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2571166243959183573),
            name: 'seats',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6363392549505646349),
            name: 'barcodeUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8177338535678221264),
            name: 'qrImage',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 6289555145639042749),
            name: 'pricelistId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 6833016379780711393),
            name: 'locked',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 1238364641868078322),
            name: 'userIds',
            type: 23,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 8301281585921327305),
            name: 'shape',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 4882317184682868603),
            name: 'color',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 7067133726119595479),
            name: 'positionH',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 5831099815725428205),
            name: 'positionV',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 2272821252479969472),
            name: 'width',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 7189555206025767599),
            name: 'height',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 6900534807978047832),
            name: 'floorId',
            type: 11,
            flags: 520,
            indexId: const IdUid(8, 324292933140071016),
            relationTarget: 'Floor'),
        ModelProperty(
            id: const IdUid(17, 3309095694235259246),
            name: 'chosen',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(37, 7509859083694930074),
      name: 'Tax',
      lastPropertyId: const IdUid(18, 65525155887419837),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4598533520729949249),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7872165896352474036),
            name: 'odooId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2177084260758844664),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7222205867815932897),
            name: 'typeTaxUse',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4199810111399125572),
            name: 'taxScope',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7046691160584109788),
            name: 'companyId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 7739543261277932669),
            name: 'amountType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 5055609075491237911),
            name: 'amount',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 3334630893214929670),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 1014300821187567584),
            name: 'priceInclude',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 7944036420052506579),
            name: 'taxGroupId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 888356886504550822),
            name: 'analytic',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 7438357211743983973),
            name: 'countryId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 620782248628675933),
            name: 'includeBaseAmount',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 8932565790032124287),
            name: 'isBaseAffected',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 6619672108025426662),
            name: 'childrenTaxIds',
            type: 23,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 7425523172871669559),
            name: 'invoiceRepartitionLineIds',
            type: 23,
            flags: 0),
        ModelProperty(
            id: const IdUid(18, 65525155887419837),
            name: 'refundRepartitionLineIds',
            type: 23,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(38, 2404968870750516933),
      name: 'User',
      lastPropertyId: const IdUid(10, 432061638970082415),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 652777627420982743),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5121710211884773278),
            name: 'odooId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3332201969263620605),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 9210302448741795063),
            name: 'login',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4831464737612352070),
            name: 'securityPin',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 6691293756464955235),
            name: 'posUserType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 5007621646400269436),
            name: 'image',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 6339592540038148402),
            name: 'posSecurityGroupIds',
            type: 23,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 7787332821546667156),
            name: 'companyIds',
            type: 23,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 432061638970082415),
            name: 'posId',
            type: 11,
            flags: 520,
            indexId: const IdUid(9, 5945414732992699977),
            relationTarget: 'POS')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(39, 4962806713452299169),
      name: 'Branch1',
      lastPropertyId: const IdUid(7, 6827434740521761251),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3886286660825743931),
            name: 'odooId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(2, 3016414530288743623),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(3, 7835560335610008299),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4158283645833760065),
            name: 'telephone',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4614287305890650362),
            name: 'address',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8485368540757027858),
            name: 'companyId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 6827434740521761251),
            name: 'journalIDId',
            type: 11,
            flags: 520,
            indexId: const IdUid(21, 4946628780857326619),
            relationTarget: 'JournalID')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(41, 6797342004914879259),
      name: 'Session1',
      lastPropertyId: const IdUid(14, 2649102909435793704),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6108390297838180962),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6107823832940893908),
            name: 'odooId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5631778701260739171),
            name: 'dbLink',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6286777209017198544),
            name: 'posName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7158999501932018511),
            name: 'sessionOpenedBy',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 6384017757391226121),
            name: 'sessionNumber',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 1531182792717690243),
            name: 'sessionStatus',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 2499371303638711293),
            name: 'workingDate',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 8591960111171013068),
            name: 'sessionStartTime',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 585059737643062292),
            name: 'sessionEndTime',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 1201147013330924857),
            name: 'startingCredit',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 7437970123675733343),
            name: 'endingCredit',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 4420987986190893415),
            name: 'version',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 2649102909435793704),
            name: 'userName',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(41, 6797342004914879259),
      lastIndexId: const IdUid(22, 5930642240021981864),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [7910056075023797487, 4201743459044107218],
      retiredIndexUids: const [
        1437941848210461487,
        3357010925810854899,
        1635620952437907121,
        1312382908032524120,
        7290561573906236009,
        6883084983204687678,
        4299656294848194951,
        2739864501614249046,
        4880166261738797361,
        4003740886234786577,
        4533106804682030578,
        5930642240021981864,
        1408574429437093999
      ],
      retiredPropertyUids: const [
        4344712151158719067,
        6911797501657453112,
        678880585537558884,
        6993498916671674760,
        2733404568562588915,
        7283161690449309098,
        2814194992451678641,
        4823374987687118128,
        8385965430687010481,
        6502786185103785366,
        253139241613291274,
        5914322944066712923,
        4006335204823979409,
        3287071056513591016,
        1494482974241421097,
        4348239842411539649,
        7539711931618137004,
        1801254277148854727,
        3844629764702922966,
        1085953912313555043,
        1854079843190839032,
        2812649468582741091,
        7758108410211311104
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Company: EntityDefinition<Company>(
        model: _entities[0],
        toOneRelations: (Company object) => [],
        toManyRelations: (Company object) => {},
        getId: (Company object) => object.id,
        setId: (Company object, int id) {
          object.id = id;
        },
        objectToFB: (Company object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final imageOffset =
              object.image == null ? null : fbb.writeString(object.image!);
          final phoneOffset =
              object.phone == null ? null : fbb.writeString(object.phone!);
          final mobileOffset =
              object.mobile == null ? null : fbb.writeString(object.mobile!);
          final emailOffset =
              object.email == null ? null : fbb.writeString(object.email!);
          final streetOffset =
              object.street == null ? null : fbb.writeString(object.street!);
          final street2Offset =
              object.street2 == null ? null : fbb.writeString(object.street2!);
          final cityOffset =
              object.city == null ? null : fbb.writeString(object.city!);
          final zipOffset =
              object.zip == null ? null : fbb.writeString(object.zip!);
          final companyRegistryOffset = object.companyRegistry == null
              ? null
              : fbb.writeString(object.companyRegistry!);
          final vatOffset =
              object.vat == null ? null : fbb.writeString(object.vat!);
          fbb.startTable(17);
          fbb.addInt64(0, object.odooId);
          fbb.addInt64(1, object.id);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, imageOffset);
          fbb.addOffset(4, phoneOffset);
          fbb.addOffset(5, mobileOffset);
          fbb.addOffset(6, emailOffset);
          fbb.addOffset(7, streetOffset);
          fbb.addOffset(8, street2Offset);
          fbb.addOffset(9, cityOffset);
          fbb.addInt64(10, object.stateId);
          fbb.addOffset(11, zipOffset);
          fbb.addOffset(12, companyRegistryOffset);
          fbb.addOffset(13, vatOffset);
          fbb.addInt64(14, object.currencyId);
          fbb.addBool(15, object.gotBranches);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Company(
              odooId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              image: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              phone: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              mobile: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              email: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              street: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18),
              street2: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 20),
              city: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 22),
              stateId: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 24),
              zip: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 26),
              companyRegistry: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 28),
              vat: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 30),
              currencyId: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 32),
              gotBranches: const fb.BoolReader().vTableGet(buffer, rootOffset, 34, false));

          return object;
        }),
    Coupon: EntityDefinition<Coupon>(
        model: _entities[1],
        toOneRelations: (Coupon object) => [],
        toManyRelations: (Coupon object) => {},
        getId: (Coupon object) => object.id,
        setId: (Coupon object, int id) {
          object.id = id;
        },
        objectToFB: (Coupon object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final appliedAppOffset = object.appliedApp == null
              ? null
              : fbb.writeString(object.appliedApp!);
          final cBarcodeOffset = object.cBarcode == null
              ? null
              : fbb.writeString(object.cBarcode!);
          final amountTypeOffset = object.amountType == null
              ? null
              : fbb.writeString(object.amountType!);
          final applyCouponOnOffset = object.applyCouponOn == null
              ? null
              : fbb.writeString(object.applyCouponOn!);
          final issueDateOffset = object.issueDate == null
              ? null
              : fbb.writeString(object.issueDate!);
          final expiryDateOffset = object.expiryDate == null
              ? null
              : fbb.writeString(object.expiryDate!);
          final categIdsOffset = object.categIds == null
              ? null
              : fbb.writeListInt8(object.categIds!);
          final couponDescOffset = object.couponDesc == null
              ? null
              : fbb.writeString(object.couponDesc!);
          fbb.startTable(22);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.odooId);
          fbb.addOffset(2, nameOffset);
          fbb.addInt64(3, object.productId);
          fbb.addBool(4, object.active);
          fbb.addInt64(5, object.couponApplyTimes);
          fbb.addOffset(6, appliedAppOffset);
          fbb.addOffset(7, cBarcodeOffset);
          fbb.addOffset(8, amountTypeOffset);
          fbb.addOffset(9, applyCouponOnOffset);
          fbb.addOffset(10, issueDateOffset);
          fbb.addBool(11, object.expDatShow);
          fbb.addOffset(12, expiryDateOffset);
          fbb.addFloat64(13, object.amount);
          fbb.addBool(14, object.partnerTrue);
          fbb.addInt64(15, object.partnerId);
          fbb.addBool(16, object.isCateg);
          fbb.addOffset(17, categIdsOffset);
          fbb.addFloat64(18, object.maxAmount);
          fbb.addOffset(19, couponDescOffset);
          fbb.addBool(20, object.description);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Coupon(
              odooId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              active: const fb.BoolReader()
                  .vTableGetNullable(buffer, rootOffset, 12),
              amount: const fb.Float64Reader()
                  .vTableGetNullable(buffer, rootOffset, 30),
              amountType: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 20),
              appliedApp: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              applyCouponOn: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 22),
              cBarcode: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18),
              categIds: const fb.ListReader<int>(fb.Int8Reader(), lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 38),
              couponApplyTimes: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14),
              couponDesc: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 42),
              description: const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 44),
              partnerTrue: const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 32),
              expDatShow: const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 26),
              expiryDate: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 28),
              isCateg: const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 36),
              issueDate: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 24),
              maxAmount: const fb.Float64Reader().vTableGetNullable(buffer, rootOffset, 40),
              partnerId: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 34),
              productId: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10));

          return object;
        }),
    Customer: EntityDefinition<Customer>(
        model: _entities[2],
        toOneRelations: (Customer object) => [],
        toManyRelations: (Customer object) => {},
        getId: (Customer object) => object.id,
        setId: (Customer object, int id) {
          object.id = id;
        },
        objectToFB: (Customer object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final image1920Offset = object.image1920 == null
              ? null
              : fbb.writeString(object.image1920!);
          final streetOffset =
              object.street == null ? null : fbb.writeString(object.street!);
          final street2Offset =
              object.street2 == null ? null : fbb.writeString(object.street2!);
          final cityOffset =
              object.city == null ? null : fbb.writeString(object.city!);
          final zipOffset =
              object.zip == null ? null : fbb.writeString(object.zip!);
          final vatOffset =
              object.vat == null ? null : fbb.writeString(object.vat!);
          final phoneOffset =
              object.phone == null ? null : fbb.writeString(object.phone!);
          final mobileOffset =
              object.mobile == null ? null : fbb.writeString(object.mobile!);
          final emailOffset =
              object.email == null ? null : fbb.writeString(object.email!);
          final websiteOffset =
              object.website == null ? null : fbb.writeString(object.website!);
          final categoryIdOffset = object.categoryId == null
              ? null
              : fbb.writeListInt8(object.categoryId!);
          fbb.startTable(20);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.odooId);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, image1920Offset);
          fbb.addOffset(4, streetOffset);
          fbb.addOffset(5, street2Offset);
          fbb.addOffset(6, cityOffset);
          fbb.addInt64(7, object.stateId);
          fbb.addOffset(8, zipOffset);
          fbb.addInt64(9, object.countryId);
          fbb.addOffset(10, vatOffset);
          fbb.addInt64(11, object.branchId);
          fbb.addOffset(12, phoneOffset);
          fbb.addOffset(13, mobileOffset);
          fbb.addOffset(14, emailOffset);
          fbb.addOffset(15, websiteOffset);
          fbb.addOffset(16, categoryIdOffset);
          fbb.addInt64(17, object.companyId);
          fbb.addFloat64(18, object.posTotalAmount);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Customer(
              odooId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              companyId: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 38),
              branchId: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 26),
              categoryId: const fb.ListReader<int>(fb.Int8Reader(), lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 36),
              city: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              countryId: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 22),
              email: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 32),
              image1920: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              mobile: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 30),
              phone: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 28),
              posTotalAmount: const fb.Float64Reader().vTableGetNullable(buffer, rootOffset, 40),
              stateId: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 18),
              street: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 12),
              street2: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 14),
              vat: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 24),
              website: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 34),
              zip: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 20));

          return object;
        }),
    Database: EntityDefinition<Database>(
        model: _entities[3],
        toOneRelations: (Database object) => [],
        toManyRelations: (Database object) => {},
        getId: (Database object) => object.id,
        setId: (Database object, int id) {
          object.id = id;
        },
        objectToFB: (Database object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Database(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''));

          return object;
        }),
    DiscountCategoryIds: EntityDefinition<DiscountCategoryIds>(
        model: _entities[4],
        toOneRelations: (DiscountCategoryIds object) => [],
        toManyRelations: (DiscountCategoryIds object) => {},
        getId: (DiscountCategoryIds object) => object.id,
        setId: (DiscountCategoryIds object, int id) {
          object.id = id;
        },
        objectToFB: (DiscountCategoryIds object, fb.Builder fbb) {
          fbb.startTable(6);
          fbb.addInt64(0, object.odooId);
          fbb.addInt64(1, object.id);
          fbb.addInt64(2, object.categoryId);
          fbb.addInt64(3, object.discount);
          fbb.addInt64(4, object.promotionId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = DiscountCategoryIds(
              odooId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              categoryId: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 8),
              discount: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 10),
              promotionId: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 12));

          return object;
        }),
    DiscountProgram: EntityDefinition<DiscountProgram>(
        model: _entities[5],
        toOneRelations: (DiscountProgram object) => [],
        toManyRelations: (DiscountProgram object) => {},
        getId: (DiscountProgram object) => object.id,
        setId: (DiscountProgram object, int id) {
          object.id = id;
        },
        objectToFB: (DiscountProgram object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final discountTypeOffset = object.discountType == null
              ? null
              : fbb.writeString(object.discountType!);
          final posCategoryIdsOffset = object.posCategoryIds == null
              ? null
              : fbb.writeListInt8(object.posCategoryIds!);
          final posAppliedOffset = object.posApplied == null
              ? null
              : fbb.writeListInt8(object.posApplied!);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.odooId);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, discountTypeOffset);
          fbb.addBool(4, object.requireCustomer);
          fbb.addBool(5, object.customerRestricted);
          fbb.addFloat64(6, object.amount);
          fbb.addOffset(7, posCategoryIdsOffset);
          fbb.addOffset(8, posAppliedOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = DiscountProgram(
              odooId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              amount: const fb.Float64Reader()
                  .vTableGetNullable(buffer, rootOffset, 16),
              customerRestricted: const fb.BoolReader()
                  .vTableGetNullable(buffer, rootOffset, 14),
              discountType: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              posApplied: const fb.ListReader<int>(fb.Int8Reader(), lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 20),
              posCategoryIds:
                  const fb.ListReader<int>(fb.Int8Reader(), lazy: false)
                      .vTableGetNullable(buffer, rootOffset, 18),
              requireCustomer: const fb.BoolReader()
                  .vTableGetNullable(buffer, rootOffset, 12));

          return object;
        }),
    Driver: EntityDefinition<Driver>(
        model: _entities[6],
        toOneRelations: (Driver object) => [],
        toManyRelations: (Driver object) => {},
        getId: (Driver object) => object.id,
        setId: (Driver object, int id) {
          object.id = id;
        },
        objectToFB: (Driver object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final codeOffset =
              object.code == null ? null : fbb.writeString(object.code!);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.odooId);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, codeOffset);
          fbb.addBool(4, object.active);
          fbb.addInt64(5, object.companyId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Driver(
              odooId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              code: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              active: const fb.BoolReader()
                  .vTableGetNullable(buffer, rootOffset, 12),
              companyId: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 14));

          return object;
        }),
    Extra: EntityDefinition<Extra>(
        model: _entities[7],
        toOneRelations: (Extra object) => [object.line],
        toManyRelations: (Extra object) => {},
        getId: (Extra object) => object.id,
        setId: (Extra object, int id) {
          object.id = id;
        },
        objectToFB: (Extra object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addFloat64(2, object.price);
          fbb.addBool(3, object.isSelected);
          fbb.addInt64(4, object.productId);
          fbb.addInt64(5, object.line.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Extra(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              productId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              price:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0),
              isSelected: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 10, false));
          object.line.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.line.attach(store);
          return object;
        }),
    Floor: EntityDefinition<Floor>(
        model: _entities[8],
        toOneRelations: (Floor object) => [],
        toManyRelations: (Floor object) => {
              RelInfo<TableId>.toOneBacklink(
                      16, object.id, (TableId srcObject) => srcObject.floor):
                  object.tableIds
            },
        getId: (Floor object) => object.id,
        setId: (Floor object, int id) {
          object.id = id;
        },
        objectToFB: (Floor object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final backgroundColorOffset = object.backgroundColor == null
              ? null
              : fbb.writeString(object.backgroundColor!);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.odooId);
          fbb.addOffset(2, nameOffset);
          fbb.addInt64(3, object.posConfigId);
          fbb.addInt64(4, object.pricelistId);
          fbb.addOffset(5, backgroundColorOffset);
          fbb.addFloat64(6, object.width);
          fbb.addFloat64(7, object.height);
          fbb.addBool(8, object.gotRatio);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Floor(
              odooId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              backgroundColor: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              posConfigId: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 10),
              pricelistId: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 12),
              width: const fb.Float64Reader()
                  .vTableGetNullable(buffer, rootOffset, 16),
              height: const fb.Float64Reader()
                  .vTableGetNullable(buffer, rootOffset, 18),
              gotRatio: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 20, false));
          InternalToManyAccess.setRelInfo(
              object.tableIds,
              store,
              RelInfo<TableId>.toOneBacklink(
                  16, object.id, (TableId srcObject) => srcObject.floor),
              store.box<Floor>());
          return object;
        }),
    ItemId: EntityDefinition<ItemId>(
        model: _entities[9],
        toOneRelations: (ItemId object) => [],
        toManyRelations: (ItemId object) => {},
        getId: (ItemId object) => object.id,
        setId: (ItemId object, int id) {
          object.id = id;
        },
        objectToFB: (ItemId object, fb.Builder fbb) {
          final dateStartOffset = object.dateStart == null
              ? null
              : fbb.writeString(object.dateStart!);
          final dateEndOffset =
              object.dateEnd == null ? null : fbb.writeString(object.dateEnd!);
          fbb.startTable(9);
          fbb.addInt64(0, object.odooId);
          fbb.addInt64(1, object.id);
          fbb.addInt64(2, object.productTmplId);
          fbb.addInt64(3, object.productId);
          fbb.addFloat64(4, object.minQuantity);
          fbb.addFloat64(5, object.fixedPrice);
          fbb.addOffset(6, dateStartOffset);
          fbb.addOffset(7, dateEndOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ItemId(
              odooId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              dateEnd: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18),
              dateStart: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              fixedPrice: const fb.Float64Reader()
                  .vTableGetNullable(buffer, rootOffset, 14),
              minQuantity: const fb.Float64Reader()
                  .vTableGetNullable(buffer, rootOffset, 12),
              productId: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 10),
              productTmplId: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 8));

          return object;
        }),
    JournalID: EntityDefinition<JournalID>(
        model: _entities[10],
        toOneRelations: (JournalID object) => [],
        toManyRelations: (JournalID object) => {},
        getId: (JournalID object) => object.id,
        setId: (JournalID object, int id) {
          object.id = id;
        },
        objectToFB: (JournalID object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          fbb.startTable(4);
          fbb.addInt64(0, object.odooId);
          fbb.addInt64(1, object.id);
          fbb.addOffset(2, nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = JournalID(
              odooId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8));

          return object;
        }),
    KeyType: EntityDefinition<KeyType>(
        model: _entities[11],
        toOneRelations: (KeyType object) => [],
        toManyRelations: (KeyType object) => {},
        getId: (KeyType object) => object.id,
        setId: (KeyType object, int id) {
          object.id = id;
        },
        objectToFB: (KeyType object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.odooId);
          fbb.addOffset(2, nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = KeyType(
              odooId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8));

          return object;
        }),
    Line: EntityDefinition<Line>(
        model: _entities[12],
        toOneRelations: (Line object) => [object.order],
        toManyRelations: (Line object) => {
              RelInfo<Extra>.toOneBacklink(
                      6, object.id, (Extra srcObject) => srcObject.line):
                  object.extras,
              RelInfo<Note>.toOneBacklink(
                      4, object.id, (Note srcObject) => srcObject.line):
                  object.notes
            },
        getId: (Line object) => object.id,
        setId: (Line object, int id) {
          object.id = id;
        },
        objectToFB: (Line object, fb.Builder fbb) {
          final fullProductNameOffset = object.fullProductName == null
              ? null
              : fbb.writeString(object.fullProductName!);
          final qtyOffset =
              object.qty == null ? null : fbb.writeString(object.qty!);
          final priceUnitOffset = object.priceUnit == null
              ? null
              : fbb.writeString(object.priceUnit!);
          final priceSubtotalOffset = object.priceSubtotal == null
              ? null
              : fbb.writeString(object.priceSubtotal!);
          final priceSubtotalInclOffset = object.priceSubtotalIncl == null
              ? null
              : fbb.writeString(object.priceSubtotalIncl!);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.productId);
          fbb.addOffset(2, fullProductNameOffset);
          fbb.addOffset(3, qtyOffset);
          fbb.addOffset(4, priceUnitOffset);
          fbb.addOffset(5, priceSubtotalOffset);
          fbb.addOffset(6, priceSubtotalInclOffset);
          fbb.addInt64(7, object.order.targetId);
          fbb.addBool(8, object.gotDataOnce);
          fbb.addInt64(9, object.productOBid);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Line(
              productId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              productOBid:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0),
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              fullProductName: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              priceSubtotal: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              priceSubtotalIncl: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              priceUnit: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              qty: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              gotDataOnce: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 20, false));
          object.order.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.order.attach(store);
          InternalToManyAccess.setRelInfo(
              object.extras,
              store,
              RelInfo<Extra>.toOneBacklink(
                  6, object.id, (Extra srcObject) => srcObject.line),
              store.box<Line>());
          InternalToManyAccess.setRelInfo(
              object.notes,
              store,
              RelInfo<Note>.toOneBacklink(
                  4, object.id, (Note srcObject) => srcObject.line),
              store.box<Line>());
          return object;
        }),
    Note: EntityDefinition<Note>(
        model: _entities[13],
        toOneRelations: (Note object) => [object.line],
        toManyRelations: (Note object) => {},
        getId: (Note object) => object.id,
        setId: (Note object, int id) {
          object.id = id;
        },
        objectToFB: (Note object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(5);
          fbb.addOffset(0, nameOffset);
          fbb.addBool(1, object.isSelected);
          fbb.addInt64(2, object.id);
          fbb.addInt64(3, object.line.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Note(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
              isSelected:
                  const fb.BoolReader().vTableGet(buffer, rootOffset, 6, false),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 4, ''));
          object.line.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.line.attach(store);
          return object;
        }),
    Order1: EntityDefinition<Order1>(
        model: _entities[14],
        toOneRelations: (Order1 object) => [],
        toManyRelations: (Order1 object) => {
              RelInfo<Line>.toOneBacklink(
                      8, object.id, (Line srcObject) => srcObject.order):
                  object.lines,
              RelInfo<Pay>.toOneBacklink(
                      10, object.id, (Pay srcObject) => srcObject.order):
                  object.payments
            },
        getId: (Order1 object) => object.id,
        setId: (Order1 object, int id) {
          object.id = id;
        },
        objectToFB: (Order1 object, fb.Builder fbb) {
          final mobileRefOffset = object.mobileRef == null
              ? null
              : fbb.writeString(object.mobileRef!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final amountTaxOffset = object.amountTax == null
              ? null
              : fbb.writeString(object.amountTax!);
          final amountTotalOffset = object.amountTotal == null
              ? null
              : fbb.writeString(object.amountTotal!);
          final amountPaidOffset = object.amountPaid == null
              ? null
              : fbb.writeString(object.amountPaid!);
          final amountReturnOffset = object.amountReturn == null
              ? null
              : fbb.writeString(object.amountReturn!);
          final noteOffset =
              object.note == null ? null : fbb.writeString(object.note!);
          final posReferenceOffset = object.posReference == null
              ? null
              : fbb.writeString(object.posReference!);
          final timeOffset =
              object.time == null ? null : fbb.writeString(object.time!);
          final orderTypeOffset = fbb.writeString(object.orderType);
          fbb.startTable(25);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, mobileRefOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addInt64(3, object.sessionId);
          fbb.addInt64(4, object.userId);
          fbb.addOffset(5, amountTaxOffset);
          fbb.addOffset(6, amountTotalOffset);
          fbb.addOffset(7, amountPaidOffset);
          fbb.addOffset(8, amountReturnOffset);
          fbb.addInt64(9, object.orderTypeId);
          fbb.addOffset(10, noteOffset);
          fbb.addInt64(11, object.couponId);
          fbb.addInt64(12, object.returnReasonId);
          fbb.addInt64(13, object.branchId);
          fbb.addOffset(14, posReferenceOffset);
          fbb.addInt64(15, object.pricelistId);
          fbb.addOffset(16, timeOffset);
          fbb.addOffset(17, orderTypeOffset);
          fbb.addInt64(18, object.date?.millisecondsSinceEpoch);
          fbb.addInt64(19, object.customerId);
          fbb.addInt64(20, object.tableId);
          fbb.addInt64(21, object.floorId);
          fbb.addInt64(22, object.posId);
          fbb.addInt64(23, object.orderNum);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final dateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 40);
          final object = Order1(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              amountPaid: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18),
              amountReturn: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 20),
              amountTax: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              amountTotal: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              branchId: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 30),
              couponId: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 26),
              orderTypeId:
                  const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 22),
              mobileRef: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 6),
              note: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 24),
              posReference: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 32),
              pricelistId: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 34),
              returnReasonId: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 28),
              sessionId: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10),
              userId: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12),
              orderType: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 38, ''),
              posId: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 48),
              time: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 36),
              date: dateValue == null ? null : DateTime.fromMillisecondsSinceEpoch(dateValue),
              orderNum: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 50))
            ..customerId =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 42)
            ..tableId =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 44)
            ..floorId = const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 46);
          InternalToManyAccess.setRelInfo(
              object.lines,
              store,
              RelInfo<Line>.toOneBacklink(
                  8, object.id, (Line srcObject) => srcObject.order),
              store.box<Order1>());
          InternalToManyAccess.setRelInfo(
              object.payments,
              store,
              RelInfo<Pay>.toOneBacklink(
                  10, object.id, (Pay srcObject) => srcObject.order),
              store.box<Order1>());
          return object;
        }),
    POS: EntityDefinition<POS>(
        model: _entities[15],
        toOneRelations: (POS object) => [],
        toManyRelations: (POS object) => {},
        getId: (POS object) => object.id,
        setId: (POS object, int id) {
          object.id = id;
        },
        objectToFB: (POS object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final userIdsOffset = object.userIds == null
              ? null
              : fbb.writeListInt8(object.userIds!);
          final ifaceTaxIncludedOffset = object.ifaceTaxIncluded == null
              ? null
              : fbb.writeString(object.ifaceTaxIncluded!);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.odooId);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(4, userIdsOffset);
          fbb.addInt64(5, object.posTypeId);
          fbb.addOffset(6, ifaceTaxIncludedOffset);
          fbb.addInt64(8, object.branchId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = POS(
              odooId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              branchId: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 20),
              ifaceTaxIncluded: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              posTypeId: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 14),
              userIds: const fb.ListReader<int>(fb.Int8Reader(), lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 12));

          return object;
        }),
    POSCategory: EntityDefinition<POSCategory>(
        model: _entities[16],
        toOneRelations: (POSCategory object) => [],
        toManyRelations: (POSCategory object) => {},
        getId: (POSCategory object) => object.id,
        setId: (POSCategory object, int id) {
          object.id = id;
        },
        objectToFB: (POSCategory object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final image128Offset = object.image128 == null
              ? null
              : fbb.writeString(object.image128!);
          final excludePosIdsOffset = object.excludePosIds == null
              ? null
              : fbb.writeListInt8(object.excludePosIds!);
          final restaurantPrinterIdsOffset = object.restaurantPrinterIds == null
              ? null
              : fbb.writeListInt8(object.restaurantPrinterIds!);
          final websiteImage1920Offset = object.websiteImage1920 == null
              ? null
              : fbb.writeString(object.websiteImage1920!);
          fbb.startTable(12);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.odooId);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, image128Offset);
          fbb.addInt64(4, object.parentId);
          fbb.addInt64(5, object.sequence);
          fbb.addOffset(6, excludePosIdsOffset);
          fbb.addOffset(7, restaurantPrinterIdsOffset);
          fbb.addBool(8, object.invisibleInUi);
          fbb.addOffset(9, websiteImage1920Offset);
          fbb.addBool(10, object.isPublished);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = POSCategory(
              odooId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              excludePosIds: const fb.ListReader<int>(fb.Int8Reader(), lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 16),
              image128: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              invisibleInUi: const fb.BoolReader()
                  .vTableGetNullable(buffer, rootOffset, 20),
              isPublished: const fb.BoolReader()
                  .vTableGetNullable(buffer, rootOffset, 24),
              parentId: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 12),
              restaurantPrinterIds:
                  const fb.ListReader<int>(fb.Int8Reader(), lazy: false)
                      .vTableGetNullable(buffer, rootOffset, 18),
              sequence: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14),
              websiteImage1920: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 22));

          return object;
        }),
    POSData: EntityDefinition<POSData>(
        model: _entities[17],
        toOneRelations: (POSData object) => [],
        toManyRelations: (POSData object) => {},
        getId: (POSData object) => object.id,
        setId: (POSData object, int id) {
          object.id = id;
        },
        objectToFB: (POSData object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final headerOffset =
              object.header == null ? null : fbb.writeString(object.header!);
          final footerOffset =
              object.footer == null ? null : fbb.writeString(object.footer!);
          final pinCodeOffset =
              object.pinCode == null ? null : fbb.writeString(object.pinCode!);
          final defaultTypeOrderTypeOffset = object.defaultTypeOrderType == null
              ? null
              : fbb.writeString(object.defaultTypeOrderType!);
          final ifaceTaxIncludedOffset = object.ifaceTaxIncluded == null
              ? null
              : fbb.writeString(object.ifaceTaxIncluded!);
          fbb.startTable(28);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.odooId);
          fbb.addOffset(2, nameOffset);
          fbb.addInt64(3, object.posTypeId);
          fbb.addBool(4, object.isProductCaloriesActive);
          fbb.addOffset(5, headerOffset);
          fbb.addOffset(6, footerOffset);
          fbb.addBool(7, object.discountProgramActive);
          fbb.addInt64(8, object.discountProgramProductId);
          fbb.addBool(9, object.allowPinCode);
          fbb.addOffset(10, pinCodeOffset);
          fbb.addBool(11, object.orderTypeActive);
          fbb.addOffset(12, defaultTypeOrderTypeOffset);
          fbb.addInt64(13, object.pricelistId);
          fbb.addOffset(14, ifaceTaxIncludedOffset);
          fbb.addBool(15, object.manualDiscount);
          fbb.addBool(16, object.restrictPriceControl);
          fbb.addBool(17, object.usePricelist);
          fbb.addBool(18, object.modulePosDiscount);
          fbb.addInt64(19, object.discountProductId);
          fbb.addFloat64(20, object.discountPc);
          fbb.addBool(21, object.allowSplitTable);
          fbb.addBool(22, object.allowTransferTable);
          fbb.addInt64(23, object.branchId);
          fbb.addBool(24, object.modulePosRestaurant);
          fbb.addBool(25, object.isOrderPrinter);
          fbb.addInt64(26, object.companyId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = POSData(
              odooId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              allowPinCode: const fb.BoolReader()
                  .vTableGetNullable(buffer, rootOffset, 22),
              allowSplitTable: const fb.BoolReader()
                  .vTableGetNullable(buffer, rootOffset, 46),
              allowTransferTable: const fb.BoolReader()
                  .vTableGetNullable(buffer, rootOffset, 48),
              branchId: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 50),
              companyId: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 56),
              defaultTypeOrderType: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 28),
              discountPc: const fb.Float64Reader()
                  .vTableGetNullable(buffer, rootOffset, 44),
              discountProductId: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 42),
              discountProgramActive: const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 18),
              discountProgramProductId: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 20),
              footer: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 16),
              header: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 14),
              ifaceTaxIncluded: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 32),
              isOrderPrinter: const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 54),
              isProductCaloriesActive: const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 12),
              manualDiscount: const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 34),
              modulePosDiscount: const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 40),
              modulePosRestaurant: const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 52),
              orderTypeActive: const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 26),
              pinCode: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 24),
              posTypeId: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10),
              pricelistId: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 30),
              restrictPriceControl: const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 36),
              usePricelist: const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 38));

          return object;
        }),
    POSGroup: EntityDefinition<POSGroup>(
        model: _entities[18],
        toOneRelations: (POSGroup object) => [],
        toManyRelations: (POSGroup object) => {},
        getId: (POSGroup object) => object.id,
        setId: (POSGroup object, int id) {
          object.id = id;
        },
        objectToFB: (POSGroup object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final posRoleIdsOffset = object.posRoleIds == null
              ? null
              : fbb.writeListInt8(object.posRoleIds!);
          final posUserIdsOffset = object.posUserIds == null
              ? null
              : fbb.writeListInt8(object.posUserIds!);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.odooId);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, posRoleIdsOffset);
          fbb.addOffset(4, posUserIdsOffset);
          fbb.addInt64(5, object.companyId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = POSGroup(
              odooId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              companyId: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 14),
              posRoleIds: const fb.ListReader<int>(fb.Int8Reader(), lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 10),
              posUserIds: const fb.ListReader<int>(fb.Int8Reader(), lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 12));

          return object;
        }),
    POSMultiSession: EntityDefinition<POSMultiSession>(
        model: _entities[19],
        toOneRelations: (POSMultiSession object) => [],
        toManyRelations: (POSMultiSession object) => {},
        getId: (POSMultiSession object) => object.id,
        setId: (POSMultiSession object, int id) {
          object.id = id;
        },
        objectToFB: (POSMultiSession object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final posIdsOffset =
              object.posIds == null ? null : fbb.writeListInt8(object.posIds!);
          final floorIdsOffset = object.floorIds == null
              ? null
              : fbb.writeListInt8(object.floorIds!);
          final fiscalPositionIdsOffset = object.fiscalPositionIds == null
              ? null
              : fbb.writeListInt8(object.fiscalPositionIds!);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.odooId);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, posIdsOffset);
          fbb.addOffset(4, floorIdsOffset);
          fbb.addBool(5, object.tableBlocking);
          fbb.addBool(6, object.multiSessionActive);
          fbb.addBool(7, object.syncServer);
          fbb.addOffset(8, fiscalPositionIdsOffset);
          fbb.addInt64(9, object.companyId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = POSMultiSession(
              odooId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              companyId: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 22),
              fiscalPositionIds: const fb.ListReader<int>(fb.Int8Reader(), lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 20),
              floorIds: const fb.ListReader<int>(fb.Int8Reader(), lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 12),
              multiSessionActive: const fb.BoolReader()
                  .vTableGetNullable(buffer, rootOffset, 16),
              posIds: const fb.ListReader<int>(fb.Int8Reader(), lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 10),
              syncServer: const fb.BoolReader()
                  .vTableGetNullable(buffer, rootOffset, 18),
              tableBlocking:
                  const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 14));

          return object;
        }),
    POSOrderType: EntityDefinition<POSOrderType>(
        model: _entities[20],
        toOneRelations: (POSOrderType object) => [],
        toManyRelations: (POSOrderType object) => {},
        getId: (POSOrderType object) => object.id,
        setId: (POSOrderType object, int id) {
          object.id = id;
        },
        objectToFB: (POSOrderType object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final typeOffset =
              object.type == null ? null : fbb.writeString(object.type!);
          final paymentMethodIdsOffset = object.paymentMethodIds == null
              ? null
              : fbb.writeListInt8(object.paymentMethodIds!);
          fbb.startTable(15);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.odooId);
          fbb.addOffset(2, nameOffset);
          fbb.addBool(3, object.isShowCustomerInfo);
          fbb.addBool(4, object.isRequireInformation);
          fbb.addBool(5, object.isRequireDriver);
          fbb.addBool(6, object.isAutoOpenTableScreen);
          fbb.addInt64(7, object.pricelistId);
          fbb.addOffset(8, typeOffset);
          fbb.addInt64(9, object.delivaryProductId);
          fbb.addInt64(10, object.extraProductId);
          fbb.addFloat64(11, object.extraPercentage);
          fbb.addInt64(12, object.companyId);
          fbb.addOffset(13, paymentMethodIdsOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = POSOrderType(
              odooId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              companyId: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 28),
              delivaryProductId: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 22),
              extraPercentage: const fb.Float64Reader()
                  .vTableGetNullable(buffer, rootOffset, 26),
              extraProductId: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 24),
              isAutoOpenTableScreen: const fb.BoolReader()
                  .vTableGetNullable(buffer, rootOffset, 16),
              isRequireDriver: const fb.BoolReader()
                  .vTableGetNullable(buffer, rootOffset, 14),
              isRequireInformation: const fb.BoolReader()
                  .vTableGetNullable(buffer, rootOffset, 12),
              isShowCustomerInfo: const fb.BoolReader()
                  .vTableGetNullable(buffer, rootOffset, 10),
              paymentMethodIds: const fb.ListReader<int>(fb.Int8Reader(), lazy: false).vTableGetNullable(buffer, rootOffset, 30),
              pricelistId: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 18),
              type: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 20));

          return object;
        }),
    POSSecurityRole: EntityDefinition<POSSecurityRole>(
        model: _entities[21],
        toOneRelations: (POSSecurityRole object) => [],
        toManyRelations: (POSSecurityRole object) => {},
        getId: (POSSecurityRole object) => object.id,
        setId: (POSSecurityRole object, int id) {
          object.id = id;
        },
        objectToFB: (POSSecurityRole object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final descOffset =
              object.desc == null ? null : fbb.writeString(object.desc!);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.odooId);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, descOffset);
          fbb.addInt64(4, object.keyId);
          fbb.addBool(5, object.isDefaultValue);
          fbb.addInt64(6, object.companyId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = POSSecurityRole(
              odooId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              companyId: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 16),
              desc: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              isDefaultValue: const fb.BoolReader()
                  .vTableGetNullable(buffer, rootOffset, 14),
              keyId: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 12));

          return object;
        }),
    POSType: EntityDefinition<POSType>(
        model: _entities[22],
        toOneRelations: (POSType object) => [],
        toManyRelations: (POSType object) => {},
        getId: (POSType object) => object.id,
        setId: (POSType object, int id) {
          object.id = id;
        },
        objectToFB: (POSType object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.odooId);
          fbb.addOffset(2, nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = POSType(
              odooId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8));

          return object;
        }),
    Pay: EntityDefinition<Pay>(
        model: _entities[23],
        toOneRelations: (Pay object) => [object.order],
        toManyRelations: (Pay object) => {},
        getId: (Pay object) => object.id,
        setId: (Pay object, int id) {
          object.id = id;
        },
        objectToFB: (Pay object, fb.Builder fbb) {
          final typeOffset = fbb.writeString(object.type);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.odooId);
          fbb.addBool(2, object.cash);
          fbb.addBool(3, object.bank);
          fbb.addBool(4, object.others);
          fbb.addFloat64(5, object.money);
          fbb.addFloat64(6, object.change);
          fbb.addFloat64(7, object.aquirded);
          fbb.addOffset(8, typeOffset);
          fbb.addInt64(9, object.order.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Pay(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              odooId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              money:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 14, 0),
              type: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 20, ''),
              aquirded:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 18, 0),
              change:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 16, 0),
              bank: const fb.BoolReader()
                  .vTableGetNullable(buffer, rootOffset, 10),
              cash: const fb.BoolReader()
                  .vTableGetNullable(buffer, rootOffset, 8),
              others: const fb.BoolReader()
                  .vTableGetNullable(buffer, rootOffset, 12));
          object.order.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          object.order.attach(store);
          return object;
        }),
    PaymentMethod: EntityDefinition<PaymentMethod>(
        model: _entities[24],
        toOneRelations: (PaymentMethod object) => [],
        toManyRelations: (PaymentMethod object) => {},
        getId: (PaymentMethod object) => object.id,
        setId: (PaymentMethod object, int id) {
          object.id = id;
        },
        objectToFB: (PaymentMethod object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final methodTypeOffset = object.methodType == null
              ? null
              : fbb.writeString(object.methodType!);
          final jornalNameOffset = object.jornalName == null
              ? null
              : fbb.writeString(object.jornalName!);
          final odooJournalIDFromdbOffset = object.odooJournalIDFromdb == null
              ? null
              : fbb.writeString(object.odooJournalIDFromdb!);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.odooId);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, methodTypeOffset);
          fbb.addBool(4, object.identifyCustomer);
          fbb.addOffset(5, jornalNameOffset);
          fbb.addOffset(6, odooJournalIDFromdbOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = PaymentMethod(
              odooId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              identifyCustomer: const fb.BoolReader()
                  .vTableGetNullable(buffer, rootOffset, 12),
              methodType: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10))
            ..jornalName = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 14)
            ..odooJournalIDFromdb =
                const fb.StringReader(asciiOptimization: true)
                    .vTableGetNullable(buffer, rootOffset, 16);

          return object;
        }),
    PriceList: EntityDefinition<PriceList>(
        model: _entities[25],
        toOneRelations: (PriceList object) => [],
        toManyRelations: (PriceList object) => {},
        getId: (PriceList object) => object.id,
        setId: (PriceList object, int id) {
          object.id = id;
        },
        objectToFB: (PriceList object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final countryGroupIdsOffset = object.countryGroupIds == null
              ? null
              : fbb.writeListInt8(object.countryGroupIds!);
          final codeOffset =
              object.code == null ? null : fbb.writeString(object.code!);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.odooId);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, countryGroupIdsOffset);
          fbb.addInt64(4, object.websiteId);
          fbb.addBool(5, object.selectable);
          fbb.addOffset(6, codeOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = PriceList(
              odooId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              code: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              countryGroupIds:
                  const fb.ListReader<int>(fb.Int8Reader(), lazy: false)
                      .vTableGetNullable(buffer, rootOffset, 10),
              selectable: const fb.BoolReader()
                  .vTableGetNullable(buffer, rootOffset, 14),
              websiteId: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 12));

          return object;
        }),
    Product: EntityDefinition<Product>(
        model: _entities[26],
        toOneRelations: (Product object) => [],
        toManyRelations: (Product object) => {},
        getId: (Product object) => object.id,
        setId: (Product object, int id) {
          object.id = id;
        },
        objectToFB: (Product object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final image1920Offset = object.image1920 == null
              ? null
              : fbb.writeString(object.image1920!);
          final detailedTypeOffset = object.detailedType == null
              ? null
              : fbb.writeString(object.detailedType!);
          final invoicePolicyOffset = object.invoicePolicy == null
              ? null
              : fbb.writeString(object.invoicePolicy!);
          final taxesIdOffset = object.taxesId == null
              ? null
              : fbb.writeListInt8(object.taxesId!);
          final defaultCodeOffset = object.defaultCode == null
              ? null
              : fbb.writeString(object.defaultCode!);
          final barcodeOffset =
              object.barcode == null ? null : fbb.writeString(object.barcode!);
          final accessoryProductIdsOffset = object.accessoryProductIds == null
              ? null
              : fbb.writeListInt8(object.accessoryProductIds!);
          final alternativeProductIdsOffset =
              object.alternativeProductIds == null
                  ? null
                  : fbb.writeListInt8(object.alternativeProductIds!);
          final publicCategIdsOffset = object.publicCategIds == null
              ? null
              : fbb.writeListInt8(object.publicCategIds!);
          final extraProductsOffset = object.extraProducts == null
              ? null
              : fbb.writeListInt8(object.extraProducts!);
          fbb.startTable(36);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.odooId);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, image1920Offset);
          fbb.addBool(4, object.saleOk);
          fbb.addBool(5, object.purchaseOk);
          fbb.addOffset(6, detailedTypeOffset);
          fbb.addOffset(7, invoicePolicyOffset);
          fbb.addFloat64(8, object.listPrice);
          fbb.addOffset(9, taxesIdOffset);
          fbb.addFloat64(10, object.standardPrice);
          fbb.addOffset(11, defaultCodeOffset);
          fbb.addOffset(12, barcodeOffset);
          fbb.addInt64(13, object.categId);
          fbb.addInt64(14, object.companyId);
          fbb.addInt64(15, object.branchId);
          fbb.addOffset(16, accessoryProductIdsOffset);
          fbb.addOffset(17, alternativeProductIdsOffset);
          fbb.addBool(18, object.availableInPos);
          fbb.addBool(19, object.invisibleInUi);
          fbb.addBool(20, object.toWeight);
          fbb.addInt64(21, object.posCategId);
          fbb.addInt64(22, object.websiteId);
          fbb.addInt64(23, object.websiteSequence);
          fbb.addOffset(24, publicCategIdsOffset);
          fbb.addInt64(25, object.websiteRibbonId);
          fbb.addFloat64(26, object.weight);
          fbb.addFloat64(27, object.volume);
          fbb.addFloat64(28, object.saleDelay);
          fbb.addFloat64(29, object.propertyAccountCreditorPriceDifference);
          fbb.addInt64(30, object.propertyAccountExpenseId);
          fbb.addInt64(31, object.propertyAccountIncomeId);
          fbb.addBool(32, object.isDiscount);
          fbb.addBool(33, object.isExtra);
          fbb.addOffset(34, extraProductsOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Product(
              odooId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              companyId: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 32),
              accessoryProductIds:
                  const fb.ListReader<int>(fb.Int8Reader(), lazy: false)
                      .vTableGetNullable(buffer, rootOffset, 36),
              alternativeProductIds:
                  const fb.ListReader<int>(fb.Int8Reader(), lazy: false)
                      .vTableGetNullable(buffer, rootOffset, 38),
              availableInPos: const fb.BoolReader()
                  .vTableGetNullable(buffer, rootOffset, 40),
              barcode: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 28),
              branchId: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 34),
              categId: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 30),
              defaultCode: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 26),
              detailedType: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 16),
              taxesId: const fb.ListReader<int>(fb.Int8Reader(), lazy: false).vTableGetNullable(buffer, rootOffset, 22),
              extraProducts: const fb.ListReader<int>(fb.Int8Reader(), lazy: false).vTableGetNullable(buffer, rootOffset, 72),
              image1920: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 10),
              invisibleInUi: const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 42),
              invoicePolicy: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 18),
              isDiscount: const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 68),
              isExtra: const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 70),
              listPrice: const fb.Float64Reader().vTableGetNullable(buffer, rootOffset, 20),
              posCategId: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 46),
              propertyAccountCreditorPriceDifference: const fb.Float64Reader().vTableGetNullable(buffer, rootOffset, 62),
              propertyAccountExpenseId: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 64),
              propertyAccountIncomeId: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 66),
              publicCategIds: const fb.ListReader<int>(fb.Int8Reader(), lazy: false).vTableGetNullable(buffer, rootOffset, 52),
              purchaseOk: const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 14),
              saleDelay: const fb.Float64Reader().vTableGetNullable(buffer, rootOffset, 60),
              saleOk: const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 12),
              standardPrice: const fb.Float64Reader().vTableGetNullable(buffer, rootOffset, 24),
              toWeight: const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 44),
              volume: const fb.Float64Reader().vTableGetNullable(buffer, rootOffset, 58),
              websiteId: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 48),
              websiteRibbonId: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 54),
              websiteSequence: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 50),
              weight: const fb.Float64Reader().vTableGetNullable(buffer, rootOffset, 56));

          return object;
        }),
    ProductCategory: EntityDefinition<ProductCategory>(
        model: _entities[27],
        toOneRelations: (ProductCategory object) => [],
        toManyRelations: (ProductCategory object) => {},
        getId: (ProductCategory object) => object.id,
        setId: (ProductCategory object, int id) {
          object.id = id;
        },
        objectToFB: (ProductCategory object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final propertyCostMethodOffset = object.propertyCostMethod == null
              ? null
              : fbb.writeString(object.propertyCostMethod!);
          final propertyValuationOffset = object.propertyValuation == null
              ? null
              : fbb.writeString(object.propertyValuation!);
          final propertyAccountCreditorPriceDifferenceCategOffset =
              object.propertyAccountCreditorPriceDifferenceCateg == null
                  ? null
                  : fbb.writeString(
                      object.propertyAccountCreditorPriceDifferenceCateg!);
          fbb.startTable(14);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.odooId);
          fbb.addOffset(2, nameOffset);
          fbb.addInt64(3, object.parentId);
          fbb.addInt64(4, object.removalStrategyId);
          fbb.addOffset(5, propertyCostMethodOffset);
          fbb.addOffset(6, propertyValuationOffset);
          fbb.addOffset(7, propertyAccountCreditorPriceDifferenceCategOffset);
          fbb.addInt64(8, object.propertyAccountExpenseCategId);
          fbb.addInt64(9, object.propertyAccountIncomeCategId);
          fbb.addInt64(10, object.propertyStockAccountInputCategId);
          fbb.addInt64(11, object.propertyStockAccountOutputCategId);
          fbb.addInt64(12, object.propertyStockValuationAccountId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ProductCategory(
              odooId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              parentId: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 10),
              propertyAccountCreditorPriceDifferenceCateg: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18),
              propertyAccountExpenseCategId: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 20),
              propertyAccountIncomeCategId: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 22),
              propertyCostMethod: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              propertyStockAccountInputCategId: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 24),
              propertyStockAccountOutputCategId:
                  const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 26),
              propertyStockValuationAccountId: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 28),
              propertyValuation: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 16),
              removalStrategyId: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12));

          return object;
        }),
    ProductNote: EntityDefinition<ProductNote>(
        model: _entities[28],
        toOneRelations: (ProductNote object) => [],
        toManyRelations: (ProductNote object) => {},
        getId: (ProductNote object) => object.id,
        setId: (ProductNote object, int id) {
          object.id = id;
        },
        objectToFB: (ProductNote object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final posCategoryIdsOffset = object.posCategoryIds == null
              ? null
              : fbb.writeListInt8(object.posCategoryIds!);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.odooId);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, posCategoryIdsOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ProductNote(
              odooId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              posCategoryIds:
                  const fb.ListReader<int>(fb.Int8Reader(), lazy: false)
                      .vTableGetNullable(buffer, rootOffset, 10));

          return object;
        }),
    Promotion: EntityDefinition<Promotion>(
        model: _entities[29],
        toOneRelations: (Promotion object) => [],
        toManyRelations: (Promotion object) => {},
        getId: (Promotion object) => object.id,
        setId: (Promotion object, int id) {
          object.id = id;
        },
        objectToFB: (Promotion object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final startDateOffset = object.startDate == null
              ? null
              : fbb.writeString(object.startDate!);
          final endDateOffset =
              object.endDate == null ? null : fbb.writeString(object.endDate!);
          final typeOffset =
              object.type == null ? null : fbb.writeString(object.type!);
          final methodOffset =
              object.method == null ? null : fbb.writeString(object.method!);
          final discountOrderIdsOffset = object.discountOrderIds == null
              ? null
              : fbb.writeListInt8(object.discountOrderIds!);
          final discountEcommerceCategoryIdsOffset =
              object.discountEcommerceCategoryIds == null
                  ? null
                  : fbb.writeListInt8(object.discountEcommerceCategoryIds!);
          final discountQuantityIdsOffset = object.discountQuantityIds == null
              ? null
              : fbb.writeListInt8(object.discountQuantityIds!);
          final giftConditionIdsOffset = object.giftConditionIds == null
              ? null
              : fbb.writeListInt8(object.giftConditionIds!);
          final giftFreeIdsOffset = object.giftFreeIds == null
              ? null
              : fbb.writeListInt8(object.giftFreeIds!);
          final discountConditionIdsOffset = object.discountConditionIds == null
              ? null
              : fbb.writeListInt8(object.discountConditionIds!);
          final discountApplyIdsOffset = object.discountApplyIds == null
              ? null
              : fbb.writeListInt8(object.discountApplyIds!);
          final priceIdsOffset = object.priceIds == null
              ? null
              : fbb.writeListInt8(object.priceIds!);
          final specialCategoryIdsOffset = object.specialCategoryIds == null
              ? null
              : fbb.writeListInt8(object.specialCategoryIds!);
          final multiBuyIdsOffset = object.multiBuyIds == null
              ? null
              : fbb.writeListInt8(object.multiBuyIds!);
          final productIdsOffset = object.productIds == null
              ? null
              : fbb.writeListInt8(object.productIds!);
          final specialCustomerIdsOffset = object.specialCustomerIds == null
              ? null
              : fbb.writeListInt8(object.specialCustomerIds!);
          final promotionBirthdayTypeOffset =
              object.promotionBirthdayType == null
                  ? null
                  : fbb.writeString(object.promotionBirthdayType!);
          final promotionGroupIdsOffset = object.promotionGroupIds == null
              ? null
              : fbb.writeListInt8(object.promotionGroupIds!);
          final stateOffset =
              object.state == null ? null : fbb.writeString(object.state!);
          fbb.startTable(43);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.odooId);
          fbb.addOffset(2, nameOffset);
          fbb.addBool(3, object.active);
          fbb.addOffset(4, startDateOffset);
          fbb.addOffset(5, endDateOffset);
          fbb.addInt64(6, object.amountTotal);
          fbb.addOffset(7, typeOffset);
          fbb.addOffset(8, methodOffset);
          fbb.addInt64(9, object.discountFirstOrder);
          fbb.addInt64(10, object.productId);
          fbb.addOffset(11, discountOrderIdsOffset);
          fbb.addOffset(12, discountEcommerceCategoryIdsOffset);
          fbb.addOffset(13, discountQuantityIdsOffset);
          fbb.addOffset(14, giftConditionIdsOffset);
          fbb.addOffset(15, giftFreeIdsOffset);
          fbb.addOffset(16, discountConditionIdsOffset);
          fbb.addOffset(17, discountApplyIdsOffset);
          fbb.addOffset(18, priceIdsOffset);
          fbb.addOffset(19, specialCategoryIdsOffset);
          fbb.addInt64(20, object.discountLowestPrice);
          fbb.addOffset(21, multiBuyIdsOffset);
          fbb.addOffset(22, productIdsOffset);
          fbb.addInt64(23, object.minimumItems);
          fbb.addOffset(24, specialCustomerIdsOffset);
          fbb.addBool(25, object.promotionBirthday);
          fbb.addOffset(26, promotionBirthdayTypeOffset);
          fbb.addBool(27, object.promotionGroup);
          fbb.addOffset(28, promotionGroupIdsOffset);
          fbb.addOffset(29, stateOffset);
          fbb.addBool(30, object.specialDays);
          fbb.addBool(31, object.monday);
          fbb.addBool(32, object.tuesday);
          fbb.addBool(33, object.wednesday);
          fbb.addBool(34, object.thursday);
          fbb.addBool(35, object.friday);
          fbb.addBool(36, object.saturday);
          fbb.addBool(37, object.sunday);
          fbb.addBool(38, object.specialTimes);
          fbb.addInt64(39, object.fromTime);
          fbb.addInt64(40, object.toTime);
          fbb.addInt64(41, object.branchId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Promotion(
              odooId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              active: const fb.BoolReader()
                  .vTableGetNullable(buffer, rootOffset, 10),
              amountTotal: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 16),
              branchId: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 86),
              discountApplyIds: const fb.ListReader<int>(fb.Int8Reader(), lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 38),
              discountConditionIds:
                  const fb.ListReader<int>(fb.Int8Reader(), lazy: false)
                      .vTableGetNullable(buffer, rootOffset, 36),
              discountEcommerceCategoryIds:
                  const fb.ListReader<int>(fb.Int8Reader(), lazy: false)
                      .vTableGetNullable(buffer, rootOffset, 28),
              discountFirstOrder:
                  const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 22),
              discountLowestPrice: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 44),
              discountOrderIds: const fb.ListReader<int>(fb.Int8Reader(), lazy: false).vTableGetNullable(buffer, rootOffset, 26),
              discountQuantityIds: const fb.ListReader<int>(fb.Int8Reader(), lazy: false).vTableGetNullable(buffer, rootOffset, 30),
              endDate: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 14),
              friday: const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 74),
              fromTime: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 82),
              giftConditionIds: const fb.ListReader<int>(fb.Int8Reader(), lazy: false).vTableGetNullable(buffer, rootOffset, 32),
              giftFreeIds: const fb.ListReader<int>(fb.Int8Reader(), lazy: false).vTableGetNullable(buffer, rootOffset, 34),
              method: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 20),
              minimumItems: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 50),
              monday: const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 66),
              multiBuyIds: const fb.ListReader<int>(fb.Int8Reader(), lazy: false).vTableGetNullable(buffer, rootOffset, 46),
              priceIds: const fb.ListReader<int>(fb.Int8Reader(), lazy: false).vTableGetNullable(buffer, rootOffset, 40),
              productId: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 24),
              productIds: const fb.ListReader<int>(fb.Int8Reader(), lazy: false).vTableGetNullable(buffer, rootOffset, 48),
              promotionBirthday: const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 54),
              promotionBirthdayType: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 56),
              promotionGroup: const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 58),
              promotionGroupIds: const fb.ListReader<int>(fb.Int8Reader(), lazy: false).vTableGetNullable(buffer, rootOffset, 60),
              saturday: const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 76),
              thursday: const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 72),
              toTime: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 84),
              specialCategoryIds: const fb.ListReader<int>(fb.Int8Reader(), lazy: false).vTableGetNullable(buffer, rootOffset, 42),
              specialCustomerIds: const fb.ListReader<int>(fb.Int8Reader(), lazy: false).vTableGetNullable(buffer, rootOffset, 52),
              specialDays: const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 64),
              specialTimes: const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 80),
              startDate: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 12),
              state: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 62),
              sunday: const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 78),
              tuesday: const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 68),
              type: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 18),
              wednesday: const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 70));

          return object;
        }),
    RestaurantPrinter: EntityDefinition<RestaurantPrinter>(
        model: _entities[30],
        toOneRelations: (RestaurantPrinter object) => [],
        toManyRelations: (RestaurantPrinter object) => {},
        getId: (RestaurantPrinter object) => object.id,
        setId: (RestaurantPrinter object, int id) {
          object.id = id;
        },
        objectToFB: (RestaurantPrinter object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final printerTypeOffset = object.printerType == null
              ? null
              : fbb.writeString(object.printerType!);
          final proxyIpOffset =
              object.proxyIp == null ? null : fbb.writeString(object.proxyIp!);
          final epsonPrinterIpOffset = object.epsonPrinterIp == null
              ? null
              : fbb.writeString(object.epsonPrinterIp!);
          final posOrderTypeIdsOffset = object.posOrderTypeIds == null
              ? null
              : fbb.writeListInt8(object.posOrderTypeIds!);
          final posConfigIdsOffset = object.posConfigIds == null
              ? null
              : fbb.writeListInt8(object.posConfigIds!);
          final productCategoriesIdsOffset = object.productCategoriesIds == null
              ? null
              : fbb.writeListInt8(object.productCategoriesIds!);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.odooId);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, printerTypeOffset);
          fbb.addOffset(4, proxyIpOffset);
          fbb.addOffset(5, epsonPrinterIpOffset);
          fbb.addOffset(6, posOrderTypeIdsOffset);
          fbb.addOffset(7, posConfigIdsOffset);
          fbb.addOffset(8, productCategoriesIdsOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = RestaurantPrinter(
              odooId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              epsonPrinterIp: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              posConfigIds: const fb.ListReader<int>(fb.Int8Reader(), lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 18),
              posOrderTypeIds: const fb.ListReader<int>(fb.Int8Reader(), lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 16),
              printerType: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              productCategoriesIds: const fb.ListReader<int>(fb.Int8Reader(), lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 20),
              proxyIp: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12));

          return object;
        }),
    ReturnReason: EntityDefinition<ReturnReason>(
        model: _entities[31],
        toOneRelations: (ReturnReason object) => [],
        toManyRelations: (ReturnReason object) => {},
        getId: (ReturnReason object) => object.id,
        setId: (ReturnReason object, int id) {
          object.id = id;
        },
        objectToFB: (ReturnReason object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final companyNameOffset = object.companyName == null
              ? null
              : fbb.writeString(object.companyName!);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.odooId);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, companyNameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ReturnReason(
              odooId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              companyName: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10));

          return object;
        }),
    ScrapReasons: EntityDefinition<ScrapReasons>(
        model: _entities[32],
        toOneRelations: (ScrapReasons object) => [],
        toManyRelations: (ScrapReasons object) => {},
        getId: (ScrapReasons object) => object.id,
        setId: (ScrapReasons object, int id) {
          object.id = id;
        },
        objectToFB: (ScrapReasons object, fb.Builder fbb) {
          final shortNameOffset = object.shortName == null
              ? null
              : fbb.writeString(object.shortName!);
          final descOffset =
              object.desc == null ? null : fbb.writeString(object.desc!);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.odooId);
          fbb.addOffset(2, shortNameOffset);
          fbb.addOffset(3, descOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ScrapReasons(
              odooId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              shortName: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              desc: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10));

          return object;
        }),
    Table: EntityDefinition<Table>(
        model: _entities[33],
        toOneRelations: (Table object) => [],
        toManyRelations: (Table object) => {},
        getId: (Table object) => object.id,
        setId: (Table object, int id) {
          object.id = id;
        },
        objectToFB: (Table object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final shapeOffset =
              object.shape == null ? null : fbb.writeString(object.shape!);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.odooId);
          fbb.addOffset(2, nameOffset);
          fbb.addInt64(3, object.seats);
          fbb.addInt64(4, object.floorId);
          fbb.addBool(5, object.locked);
          fbb.addOffset(6, shapeOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Table(
              odooId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              floorId: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 12),
              locked: const fb.BoolReader()
                  .vTableGetNullable(buffer, rootOffset, 14),
              seats: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 10),
              shape: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16));

          return object;
        }),
    TableId: EntityDefinition<TableId>(
        model: _entities[34],
        toOneRelations: (TableId object) => [object.floor],
        toManyRelations: (TableId object) => {},
        getId: (TableId object) => object.id,
        setId: (TableId object, int id) {
          object.id = id;
        },
        objectToFB: (TableId object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final barcodeUrlOffset = object.barcodeUrl == null
              ? null
              : fbb.writeString(object.barcodeUrl!);
          final qrImageOffset =
              object.qrImage == null ? null : fbb.writeString(object.qrImage!);
          final userIdsOffset = object.userIds == null
              ? null
              : fbb.writeListInt8(object.userIds!);
          final shapeOffset =
              object.shape == null ? null : fbb.writeString(object.shape!);
          final colorOffset =
              object.color == null ? null : fbb.writeString(object.color!);
          fbb.startTable(18);
          fbb.addInt64(0, object.odooId);
          fbb.addInt64(1, object.id);
          fbb.addOffset(2, nameOffset);
          fbb.addInt64(3, object.seats);
          fbb.addOffset(4, barcodeUrlOffset);
          fbb.addOffset(5, qrImageOffset);
          fbb.addInt64(6, object.pricelistId);
          fbb.addBool(7, object.locked);
          fbb.addOffset(8, userIdsOffset);
          fbb.addOffset(9, shapeOffset);
          fbb.addOffset(10, colorOffset);
          fbb.addFloat64(11, object.positionH);
          fbb.addFloat64(12, object.positionV);
          fbb.addFloat64(13, object.width);
          fbb.addFloat64(14, object.height);
          fbb.addInt64(15, object.floor.targetId);
          fbb.addBool(16, object.chosen);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = TableId(
              odooId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              barcodeUrl: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              color: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 24),
              height: const fb.Float64Reader()
                  .vTableGetNullable(buffer, rootOffset, 32),
              locked: const fb.BoolReader()
                  .vTableGetNullable(buffer, rootOffset, 18),
              positionH: const fb.Float64Reader()
                  .vTableGetNullable(buffer, rootOffset, 26),
              positionV: const fb.Float64Reader()
                  .vTableGetNullable(buffer, rootOffset, 28),
              pricelistId: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 16),
              qrImage: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 14),
              seats: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10),
              shape: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 22),
              userIds: const fb.ListReader<int>(fb.Int8Reader(), lazy: false).vTableGetNullable(buffer, rootOffset, 20),
              width: const fb.Float64Reader().vTableGetNullable(buffer, rootOffset, 30),
              chosen: const fb.BoolReader().vTableGet(buffer, rootOffset, 36, false));
          object.floor.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 34, 0);
          object.floor.attach(store);
          return object;
        }),
    Tax: EntityDefinition<Tax>(
        model: _entities[35],
        toOneRelations: (Tax object) => [],
        toManyRelations: (Tax object) => {},
        getId: (Tax object) => object.id,
        setId: (Tax object, int id) {
          object.id = id;
        },
        objectToFB: (Tax object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final typeTaxUseOffset = object.typeTaxUse == null
              ? null
              : fbb.writeString(object.typeTaxUse!);
          final taxScopeOffset = object.taxScope == null
              ? null
              : fbb.writeString(object.taxScope!);
          final amountTypeOffset = object.amountType == null
              ? null
              : fbb.writeString(object.amountType!);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          final childrenTaxIdsOffset = object.childrenTaxIds == null
              ? null
              : fbb.writeListInt8(object.childrenTaxIds!);
          final invoiceRepartitionLineIdsOffset =
              object.invoiceRepartitionLineIds == null
                  ? null
                  : fbb.writeListInt8(object.invoiceRepartitionLineIds!);
          final refundRepartitionLineIdsOffset =
              object.refundRepartitionLineIds == null
                  ? null
                  : fbb.writeListInt8(object.refundRepartitionLineIds!);
          fbb.startTable(19);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.odooId);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, typeTaxUseOffset);
          fbb.addOffset(4, taxScopeOffset);
          fbb.addInt64(5, object.companyId);
          fbb.addOffset(6, amountTypeOffset);
          fbb.addFloat64(7, object.amount);
          fbb.addOffset(8, descriptionOffset);
          fbb.addBool(9, object.priceInclude);
          fbb.addInt64(10, object.taxGroupId);
          fbb.addBool(11, object.analytic);
          fbb.addInt64(12, object.countryId);
          fbb.addBool(13, object.includeBaseAmount);
          fbb.addBool(14, object.isBaseAffected);
          fbb.addOffset(15, childrenTaxIdsOffset);
          fbb.addOffset(16, invoiceRepartitionLineIdsOffset);
          fbb.addOffset(17, refundRepartitionLineIdsOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Tax(
              odooId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              companyId: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 14),
              amount: const fb.Float64Reader()
                  .vTableGetNullable(buffer, rootOffset, 18),
              amountType: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              analytic: const fb.BoolReader()
                  .vTableGetNullable(buffer, rootOffset, 26),
              childrenTaxIds:
                  const fb.ListReader<int>(fb.Int8Reader(), lazy: false)
                      .vTableGetNullable(buffer, rootOffset, 34),
              countryId: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 28),
              description: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 20),
              includeBaseAmount: const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 30),
              invoiceRepartitionLineIds: const fb.ListReader<int>(fb.Int8Reader(), lazy: false).vTableGetNullable(buffer, rootOffset, 36),
              isBaseAffected: const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 32),
              priceInclude: const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 22),
              refundRepartitionLineIds: const fb.ListReader<int>(fb.Int8Reader(), lazy: false).vTableGetNullable(buffer, rootOffset, 38),
              taxGroupId: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 24),
              taxScope: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 12),
              typeTaxUse: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 10));

          return object;
        }),
    User: EntityDefinition<User>(
        model: _entities[36],
        toOneRelations: (User object) => [object.pos],
        toManyRelations: (User object) => {},
        getId: (User object) => object.id,
        setId: (User object, int id) {
          object.id = id;
        },
        objectToFB: (User object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final loginOffset =
              object.login == null ? null : fbb.writeString(object.login!);
          final securityPinOffset = object.securityPin == null
              ? null
              : fbb.writeString(object.securityPin!);
          final posUserTypeOffset = object.posUserType == null
              ? null
              : fbb.writeString(object.posUserType!);
          final imageOffset =
              object.image == null ? null : fbb.writeString(object.image!);
          final posSecurityGroupIdsOffset = object.posSecurityGroupIds == null
              ? null
              : fbb.writeListInt8(object.posSecurityGroupIds!);
          final companyIdsOffset = object.companyIds == null
              ? null
              : fbb.writeListInt8(object.companyIds!);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.odooId);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, loginOffset);
          fbb.addOffset(4, securityPinOffset);
          fbb.addOffset(5, posUserTypeOffset);
          fbb.addOffset(6, imageOffset);
          fbb.addOffset(7, posSecurityGroupIdsOffset);
          fbb.addOffset(8, companyIdsOffset);
          fbb.addInt64(9, object.pos.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = User(
              odooId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              companyIds: const fb.ListReader<int>(fb.Int8Reader(), lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 20),
              image: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              login: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              posSecurityGroupIds:
                  const fb.ListReader<int>(fb.Int8Reader(), lazy: false)
                      .vTableGetNullable(buffer, rootOffset, 18),
              posUserType: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              securityPin: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12));
          object.pos.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          object.pos.attach(store);
          return object;
        }),
    Branch1: EntityDefinition<Branch1>(
        model: _entities[37],
        toOneRelations: (Branch1 object) => [object.journalID],
        toManyRelations: (Branch1 object) => {},
        getId: (Branch1 object) => object.id,
        setId: (Branch1 object, int id) {
          object.id = id;
        },
        objectToFB: (Branch1 object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final telephoneOffset = object.telephone == null
              ? null
              : fbb.writeString(object.telephone!);
          final addressOffset =
              object.address == null ? null : fbb.writeString(object.address!);
          fbb.startTable(8);
          fbb.addInt64(0, object.odooId);
          fbb.addInt64(1, object.id);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, telephoneOffset);
          fbb.addOffset(4, addressOffset);
          fbb.addInt64(5, object.companyId);
          fbb.addInt64(6, object.journalID.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Branch1(
              odooId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              telephone: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              address: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              companyId: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 14));
          object.journalID.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.journalID.attach(store);
          return object;
        }),
    Session1: EntityDefinition<Session1>(
        model: _entities[38],
        toOneRelations: (Session1 object) => [],
        toManyRelations: (Session1 object) => {},
        getId: (Session1 object) => object.id,
        setId: (Session1 object, int id) {
          object.id = id;
        },
        objectToFB: (Session1 object, fb.Builder fbb) {
          final dbLinkOffset =
              object.dbLink == null ? null : fbb.writeString(object.dbLink!);
          final posNameOffset =
              object.posName == null ? null : fbb.writeString(object.posName!);
          final sessionOpenedByOffset = object.sessionOpenedBy == null
              ? null
              : fbb.writeString(object.sessionOpenedBy!);
          final sessionStatusOffset = object.sessionStatus == null
              ? null
              : fbb.writeString(object.sessionStatus!);
          final workingDateOffset = object.workingDate == null
              ? null
              : fbb.writeString(object.workingDate!);
          final sessionStartTimeOffset = object.sessionStartTime == null
              ? null
              : fbb.writeString(object.sessionStartTime!);
          final sessionEndTimeOffset = object.sessionEndTime == null
              ? null
              : fbb.writeString(object.sessionEndTime!);
          final versionOffset =
              object.version == null ? null : fbb.writeString(object.version!);
          final userNameOffset = object.userName == null
              ? null
              : fbb.writeString(object.userName!);
          fbb.startTable(15);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.odooId);
          fbb.addOffset(2, dbLinkOffset);
          fbb.addOffset(3, posNameOffset);
          fbb.addOffset(4, sessionOpenedByOffset);
          fbb.addInt64(5, object.sessionNumber);
          fbb.addOffset(6, sessionStatusOffset);
          fbb.addOffset(7, workingDateOffset);
          fbb.addOffset(8, sessionStartTimeOffset);
          fbb.addOffset(9, sessionEndTimeOffset);
          fbb.addInt64(10, object.startingCredit);
          fbb.addInt64(11, object.endingCredit);
          fbb.addOffset(12, versionOffset);
          fbb.addOffset(13, userNameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Session1(
              odooId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              dbLink: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              endingCredit: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 26),
              posName: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              sessionEndTime: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 22),
              sessionNumber: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 14),
              sessionOpenedBy: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              sessionStartTime: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 20),
              sessionStatus: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              startingCredit: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 24),
              userName: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 30),
              version: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 28),
              workingDate: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 18));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Company] entity fields to define ObjectBox queries.
class Company_ {
  /// see [Company.odooId]
  static final odooId =
      QueryIntegerProperty<Company>(_entities[0].properties[0]);

  /// see [Company.id]
  static final id = QueryIntegerProperty<Company>(_entities[0].properties[1]);

  /// see [Company.name]
  static final name = QueryStringProperty<Company>(_entities[0].properties[2]);

  /// see [Company.image]
  static final image = QueryStringProperty<Company>(_entities[0].properties[3]);

  /// see [Company.phone]
  static final phone = QueryStringProperty<Company>(_entities[0].properties[4]);

  /// see [Company.mobile]
  static final mobile =
      QueryStringProperty<Company>(_entities[0].properties[5]);

  /// see [Company.email]
  static final email = QueryStringProperty<Company>(_entities[0].properties[6]);

  /// see [Company.street]
  static final street =
      QueryStringProperty<Company>(_entities[0].properties[7]);

  /// see [Company.street2]
  static final street2 =
      QueryStringProperty<Company>(_entities[0].properties[8]);

  /// see [Company.city]
  static final city = QueryStringProperty<Company>(_entities[0].properties[9]);

  /// see [Company.stateId]
  static final stateId =
      QueryIntegerProperty<Company>(_entities[0].properties[10]);

  /// see [Company.zip]
  static final zip = QueryStringProperty<Company>(_entities[0].properties[11]);

  /// see [Company.companyRegistry]
  static final companyRegistry =
      QueryStringProperty<Company>(_entities[0].properties[12]);

  /// see [Company.vat]
  static final vat = QueryStringProperty<Company>(_entities[0].properties[13]);

  /// see [Company.currencyId]
  static final currencyId =
      QueryIntegerProperty<Company>(_entities[0].properties[14]);

  /// see [Company.gotBranches]
  static final gotBranches =
      QueryBooleanProperty<Company>(_entities[0].properties[15]);
}

/// [Coupon] entity fields to define ObjectBox queries.
class Coupon_ {
  /// see [Coupon.id]
  static final id = QueryIntegerProperty<Coupon>(_entities[1].properties[0]);

  /// see [Coupon.odooId]
  static final odooId =
      QueryIntegerProperty<Coupon>(_entities[1].properties[1]);

  /// see [Coupon.name]
  static final name = QueryStringProperty<Coupon>(_entities[1].properties[2]);

  /// see [Coupon.productId]
  static final productId =
      QueryIntegerProperty<Coupon>(_entities[1].properties[3]);

  /// see [Coupon.active]
  static final active =
      QueryBooleanProperty<Coupon>(_entities[1].properties[4]);

  /// see [Coupon.couponApplyTimes]
  static final couponApplyTimes =
      QueryIntegerProperty<Coupon>(_entities[1].properties[5]);

  /// see [Coupon.appliedApp]
  static final appliedApp =
      QueryStringProperty<Coupon>(_entities[1].properties[6]);

  /// see [Coupon.cBarcode]
  static final cBarcode =
      QueryStringProperty<Coupon>(_entities[1].properties[7]);

  /// see [Coupon.amountType]
  static final amountType =
      QueryStringProperty<Coupon>(_entities[1].properties[8]);

  /// see [Coupon.applyCouponOn]
  static final applyCouponOn =
      QueryStringProperty<Coupon>(_entities[1].properties[9]);

  /// see [Coupon.issueDate]
  static final issueDate =
      QueryStringProperty<Coupon>(_entities[1].properties[10]);

  /// see [Coupon.expDatShow]
  static final expDatShow =
      QueryBooleanProperty<Coupon>(_entities[1].properties[11]);

  /// see [Coupon.expiryDate]
  static final expiryDate =
      QueryStringProperty<Coupon>(_entities[1].properties[12]);

  /// see [Coupon.amount]
  static final amount =
      QueryDoubleProperty<Coupon>(_entities[1].properties[13]);

  /// see [Coupon.partnerTrue]
  static final partnerTrue =
      QueryBooleanProperty<Coupon>(_entities[1].properties[14]);

  /// see [Coupon.partnerId]
  static final partnerId =
      QueryIntegerProperty<Coupon>(_entities[1].properties[15]);

  /// see [Coupon.isCateg]
  static final isCateg =
      QueryBooleanProperty<Coupon>(_entities[1].properties[16]);

  /// see [Coupon.categIds]
  static final categIds =
      QueryByteVectorProperty<Coupon>(_entities[1].properties[17]);

  /// see [Coupon.maxAmount]
  static final maxAmount =
      QueryDoubleProperty<Coupon>(_entities[1].properties[18]);

  /// see [Coupon.couponDesc]
  static final couponDesc =
      QueryStringProperty<Coupon>(_entities[1].properties[19]);

  /// see [Coupon.description]
  static final description =
      QueryBooleanProperty<Coupon>(_entities[1].properties[20]);
}

/// [Customer] entity fields to define ObjectBox queries.
class Customer_ {
  /// see [Customer.id]
  static final id = QueryIntegerProperty<Customer>(_entities[2].properties[0]);

  /// see [Customer.odooId]
  static final odooId =
      QueryIntegerProperty<Customer>(_entities[2].properties[1]);

  /// see [Customer.name]
  static final name = QueryStringProperty<Customer>(_entities[2].properties[2]);

  /// see [Customer.image1920]
  static final image1920 =
      QueryStringProperty<Customer>(_entities[2].properties[3]);

  /// see [Customer.street]
  static final street =
      QueryStringProperty<Customer>(_entities[2].properties[4]);

  /// see [Customer.street2]
  static final street2 =
      QueryStringProperty<Customer>(_entities[2].properties[5]);

  /// see [Customer.city]
  static final city = QueryStringProperty<Customer>(_entities[2].properties[6]);

  /// see [Customer.stateId]
  static final stateId =
      QueryIntegerProperty<Customer>(_entities[2].properties[7]);

  /// see [Customer.zip]
  static final zip = QueryStringProperty<Customer>(_entities[2].properties[8]);

  /// see [Customer.countryId]
  static final countryId =
      QueryIntegerProperty<Customer>(_entities[2].properties[9]);

  /// see [Customer.vat]
  static final vat = QueryStringProperty<Customer>(_entities[2].properties[10]);

  /// see [Customer.branchId]
  static final branchId =
      QueryIntegerProperty<Customer>(_entities[2].properties[11]);

  /// see [Customer.phone]
  static final phone =
      QueryStringProperty<Customer>(_entities[2].properties[12]);

  /// see [Customer.mobile]
  static final mobile =
      QueryStringProperty<Customer>(_entities[2].properties[13]);

  /// see [Customer.email]
  static final email =
      QueryStringProperty<Customer>(_entities[2].properties[14]);

  /// see [Customer.website]
  static final website =
      QueryStringProperty<Customer>(_entities[2].properties[15]);

  /// see [Customer.categoryId]
  static final categoryId =
      QueryByteVectorProperty<Customer>(_entities[2].properties[16]);

  /// see [Customer.companyId]
  static final companyId =
      QueryIntegerProperty<Customer>(_entities[2].properties[17]);

  /// see [Customer.posTotalAmount]
  static final posTotalAmount =
      QueryDoubleProperty<Customer>(_entities[2].properties[18]);
}

/// [Database] entity fields to define ObjectBox queries.
class Database_ {
  /// see [Database.id]
  static final id = QueryIntegerProperty<Database>(_entities[3].properties[0]);

  /// see [Database.name]
  static final name = QueryStringProperty<Database>(_entities[3].properties[1]);
}

/// [DiscountCategoryIds] entity fields to define ObjectBox queries.
class DiscountCategoryIds_ {
  /// see [DiscountCategoryIds.odooId]
  static final odooId =
      QueryIntegerProperty<DiscountCategoryIds>(_entities[4].properties[0]);

  /// see [DiscountCategoryIds.id]
  static final id =
      QueryIntegerProperty<DiscountCategoryIds>(_entities[4].properties[1]);

  /// see [DiscountCategoryIds.categoryId]
  static final categoryId =
      QueryIntegerProperty<DiscountCategoryIds>(_entities[4].properties[2]);

  /// see [DiscountCategoryIds.discount]
  static final discount =
      QueryIntegerProperty<DiscountCategoryIds>(_entities[4].properties[3]);

  /// see [DiscountCategoryIds.promotionId]
  static final promotionId =
      QueryIntegerProperty<DiscountCategoryIds>(_entities[4].properties[4]);
}

/// [DiscountProgram] entity fields to define ObjectBox queries.
class DiscountProgram_ {
  /// see [DiscountProgram.id]
  static final id =
      QueryIntegerProperty<DiscountProgram>(_entities[5].properties[0]);

  /// see [DiscountProgram.odooId]
  static final odooId =
      QueryIntegerProperty<DiscountProgram>(_entities[5].properties[1]);

  /// see [DiscountProgram.name]
  static final name =
      QueryStringProperty<DiscountProgram>(_entities[5].properties[2]);

  /// see [DiscountProgram.discountType]
  static final discountType =
      QueryStringProperty<DiscountProgram>(_entities[5].properties[3]);

  /// see [DiscountProgram.requireCustomer]
  static final requireCustomer =
      QueryBooleanProperty<DiscountProgram>(_entities[5].properties[4]);

  /// see [DiscountProgram.customerRestricted]
  static final customerRestricted =
      QueryBooleanProperty<DiscountProgram>(_entities[5].properties[5]);

  /// see [DiscountProgram.amount]
  static final amount =
      QueryDoubleProperty<DiscountProgram>(_entities[5].properties[6]);

  /// see [DiscountProgram.posCategoryIds]
  static final posCategoryIds =
      QueryByteVectorProperty<DiscountProgram>(_entities[5].properties[7]);

  /// see [DiscountProgram.posApplied]
  static final posApplied =
      QueryByteVectorProperty<DiscountProgram>(_entities[5].properties[8]);
}

/// [Driver] entity fields to define ObjectBox queries.
class Driver_ {
  /// see [Driver.id]
  static final id = QueryIntegerProperty<Driver>(_entities[6].properties[0]);

  /// see [Driver.odooId]
  static final odooId =
      QueryIntegerProperty<Driver>(_entities[6].properties[1]);

  /// see [Driver.name]
  static final name = QueryStringProperty<Driver>(_entities[6].properties[2]);

  /// see [Driver.code]
  static final code = QueryStringProperty<Driver>(_entities[6].properties[3]);

  /// see [Driver.active]
  static final active =
      QueryBooleanProperty<Driver>(_entities[6].properties[4]);

  /// see [Driver.companyId]
  static final companyId =
      QueryIntegerProperty<Driver>(_entities[6].properties[5]);
}

/// [Extra] entity fields to define ObjectBox queries.
class Extra_ {
  /// see [Extra.id]
  static final id = QueryIntegerProperty<Extra>(_entities[7].properties[0]);

  /// see [Extra.name]
  static final name = QueryStringProperty<Extra>(_entities[7].properties[1]);

  /// see [Extra.price]
  static final price = QueryDoubleProperty<Extra>(_entities[7].properties[2]);

  /// see [Extra.isSelected]
  static final isSelected =
      QueryBooleanProperty<Extra>(_entities[7].properties[3]);

  /// see [Extra.productId]
  static final productId =
      QueryIntegerProperty<Extra>(_entities[7].properties[4]);

  /// see [Extra.line]
  static final line =
      QueryRelationToOne<Extra, Line>(_entities[7].properties[5]);
}

/// [Floor] entity fields to define ObjectBox queries.
class Floor_ {
  /// see [Floor.id]
  static final id = QueryIntegerProperty<Floor>(_entities[8].properties[0]);

  /// see [Floor.odooId]
  static final odooId = QueryIntegerProperty<Floor>(_entities[8].properties[1]);

  /// see [Floor.name]
  static final name = QueryStringProperty<Floor>(_entities[8].properties[2]);

  /// see [Floor.posConfigId]
  static final posConfigId =
      QueryIntegerProperty<Floor>(_entities[8].properties[3]);

  /// see [Floor.pricelistId]
  static final pricelistId =
      QueryIntegerProperty<Floor>(_entities[8].properties[4]);

  /// see [Floor.backgroundColor]
  static final backgroundColor =
      QueryStringProperty<Floor>(_entities[8].properties[5]);

  /// see [Floor.width]
  static final width = QueryDoubleProperty<Floor>(_entities[8].properties[6]);

  /// see [Floor.height]
  static final height = QueryDoubleProperty<Floor>(_entities[8].properties[7]);

  /// see [Floor.gotRatio]
  static final gotRatio =
      QueryBooleanProperty<Floor>(_entities[8].properties[8]);
}

/// [ItemId] entity fields to define ObjectBox queries.
class ItemId_ {
  /// see [ItemId.odooId]
  static final odooId =
      QueryIntegerProperty<ItemId>(_entities[9].properties[0]);

  /// see [ItemId.id]
  static final id = QueryIntegerProperty<ItemId>(_entities[9].properties[1]);

  /// see [ItemId.productTmplId]
  static final productTmplId =
      QueryIntegerProperty<ItemId>(_entities[9].properties[2]);

  /// see [ItemId.productId]
  static final productId =
      QueryIntegerProperty<ItemId>(_entities[9].properties[3]);

  /// see [ItemId.minQuantity]
  static final minQuantity =
      QueryDoubleProperty<ItemId>(_entities[9].properties[4]);

  /// see [ItemId.fixedPrice]
  static final fixedPrice =
      QueryDoubleProperty<ItemId>(_entities[9].properties[5]);

  /// see [ItemId.dateStart]
  static final dateStart =
      QueryStringProperty<ItemId>(_entities[9].properties[6]);

  /// see [ItemId.dateEnd]
  static final dateEnd =
      QueryStringProperty<ItemId>(_entities[9].properties[7]);
}

/// [JournalID] entity fields to define ObjectBox queries.
class JournalID_ {
  /// see [JournalID.odooId]
  static final odooId =
      QueryIntegerProperty<JournalID>(_entities[10].properties[0]);

  /// see [JournalID.id]
  static final id =
      QueryIntegerProperty<JournalID>(_entities[10].properties[1]);

  /// see [JournalID.name]
  static final name =
      QueryStringProperty<JournalID>(_entities[10].properties[2]);
}

/// [KeyType] entity fields to define ObjectBox queries.
class KeyType_ {
  /// see [KeyType.id]
  static final id = QueryIntegerProperty<KeyType>(_entities[11].properties[0]);

  /// see [KeyType.odooId]
  static final odooId =
      QueryIntegerProperty<KeyType>(_entities[11].properties[1]);

  /// see [KeyType.name]
  static final name = QueryStringProperty<KeyType>(_entities[11].properties[2]);
}

/// [Line] entity fields to define ObjectBox queries.
class Line_ {
  /// see [Line.id]
  static final id = QueryIntegerProperty<Line>(_entities[12].properties[0]);

  /// see [Line.productId]
  static final productId =
      QueryIntegerProperty<Line>(_entities[12].properties[1]);

  /// see [Line.fullProductName]
  static final fullProductName =
      QueryStringProperty<Line>(_entities[12].properties[2]);

  /// see [Line.qty]
  static final qty = QueryStringProperty<Line>(_entities[12].properties[3]);

  /// see [Line.priceUnit]
  static final priceUnit =
      QueryStringProperty<Line>(_entities[12].properties[4]);

  /// see [Line.priceSubtotal]
  static final priceSubtotal =
      QueryStringProperty<Line>(_entities[12].properties[5]);

  /// see [Line.priceSubtotalIncl]
  static final priceSubtotalIncl =
      QueryStringProperty<Line>(_entities[12].properties[6]);

  /// see [Line.order]
  static final order =
      QueryRelationToOne<Line, Order1>(_entities[12].properties[7]);

  /// see [Line.gotDataOnce]
  static final gotDataOnce =
      QueryBooleanProperty<Line>(_entities[12].properties[8]);

  /// see [Line.productOBid]
  static final productOBid =
      QueryIntegerProperty<Line>(_entities[12].properties[9]);
}

/// [Note] entity fields to define ObjectBox queries.
class Note_ {
  /// see [Note.name]
  static final name = QueryStringProperty<Note>(_entities[13].properties[0]);

  /// see [Note.isSelected]
  static final isSelected =
      QueryBooleanProperty<Note>(_entities[13].properties[1]);

  /// see [Note.id]
  static final id = QueryIntegerProperty<Note>(_entities[13].properties[2]);

  /// see [Note.line]
  static final line =
      QueryRelationToOne<Note, Line>(_entities[13].properties[3]);
}

/// [Order1] entity fields to define ObjectBox queries.
class Order1_ {
  /// see [Order1.id]
  static final id = QueryIntegerProperty<Order1>(_entities[14].properties[0]);

  /// see [Order1.mobileRef]
  static final mobileRef =
      QueryStringProperty<Order1>(_entities[14].properties[1]);

  /// see [Order1.name]
  static final name = QueryStringProperty<Order1>(_entities[14].properties[2]);

  /// see [Order1.sessionId]
  static final sessionId =
      QueryIntegerProperty<Order1>(_entities[14].properties[3]);

  /// see [Order1.userId]
  static final userId =
      QueryIntegerProperty<Order1>(_entities[14].properties[4]);

  /// see [Order1.amountTax]
  static final amountTax =
      QueryStringProperty<Order1>(_entities[14].properties[5]);

  /// see [Order1.amountTotal]
  static final amountTotal =
      QueryStringProperty<Order1>(_entities[14].properties[6]);

  /// see [Order1.amountPaid]
  static final amountPaid =
      QueryStringProperty<Order1>(_entities[14].properties[7]);

  /// see [Order1.amountReturn]
  static final amountReturn =
      QueryStringProperty<Order1>(_entities[14].properties[8]);

  /// see [Order1.orderTypeId]
  static final orderTypeId =
      QueryIntegerProperty<Order1>(_entities[14].properties[9]);

  /// see [Order1.note]
  static final note = QueryStringProperty<Order1>(_entities[14].properties[10]);

  /// see [Order1.couponId]
  static final couponId =
      QueryIntegerProperty<Order1>(_entities[14].properties[11]);

  /// see [Order1.returnReasonId]
  static final returnReasonId =
      QueryIntegerProperty<Order1>(_entities[14].properties[12]);

  /// see [Order1.branchId]
  static final branchId =
      QueryIntegerProperty<Order1>(_entities[14].properties[13]);

  /// see [Order1.posReference]
  static final posReference =
      QueryStringProperty<Order1>(_entities[14].properties[14]);

  /// see [Order1.pricelistId]
  static final pricelistId =
      QueryIntegerProperty<Order1>(_entities[14].properties[15]);

  /// see [Order1.time]
  static final time = QueryStringProperty<Order1>(_entities[14].properties[16]);

  /// see [Order1.orderType]
  static final orderType =
      QueryStringProperty<Order1>(_entities[14].properties[17]);

  /// see [Order1.date]
  static final date =
      QueryIntegerProperty<Order1>(_entities[14].properties[18]);

  /// see [Order1.customerId]
  static final customerId =
      QueryIntegerProperty<Order1>(_entities[14].properties[19]);

  /// see [Order1.tableId]
  static final tableId =
      QueryIntegerProperty<Order1>(_entities[14].properties[20]);

  /// see [Order1.floorId]
  static final floorId =
      QueryIntegerProperty<Order1>(_entities[14].properties[21]);

  /// see [Order1.posId]
  static final posId =
      QueryIntegerProperty<Order1>(_entities[14].properties[22]);

  /// see [Order1.orderNum]
  static final orderNum =
      QueryIntegerProperty<Order1>(_entities[14].properties[23]);
}

/// [POS] entity fields to define ObjectBox queries.
class POS_ {
  /// see [POS.id]
  static final id = QueryIntegerProperty<POS>(_entities[15].properties[0]);

  /// see [POS.odooId]
  static final odooId = QueryIntegerProperty<POS>(_entities[15].properties[1]);

  /// see [POS.name]
  static final name = QueryStringProperty<POS>(_entities[15].properties[2]);

  /// see [POS.userIds]
  static final userIds =
      QueryByteVectorProperty<POS>(_entities[15].properties[3]);

  /// see [POS.posTypeId]
  static final posTypeId =
      QueryIntegerProperty<POS>(_entities[15].properties[4]);

  /// see [POS.ifaceTaxIncluded]
  static final ifaceTaxIncluded =
      QueryStringProperty<POS>(_entities[15].properties[5]);

  /// see [POS.branchId]
  static final branchId =
      QueryIntegerProperty<POS>(_entities[15].properties[6]);
}

/// [POSCategory] entity fields to define ObjectBox queries.
class POSCategory_ {
  /// see [POSCategory.id]
  static final id =
      QueryIntegerProperty<POSCategory>(_entities[16].properties[0]);

  /// see [POSCategory.odooId]
  static final odooId =
      QueryIntegerProperty<POSCategory>(_entities[16].properties[1]);

  /// see [POSCategory.name]
  static final name =
      QueryStringProperty<POSCategory>(_entities[16].properties[2]);

  /// see [POSCategory.image128]
  static final image128 =
      QueryStringProperty<POSCategory>(_entities[16].properties[3]);

  /// see [POSCategory.parentId]
  static final parentId =
      QueryIntegerProperty<POSCategory>(_entities[16].properties[4]);

  /// see [POSCategory.sequence]
  static final sequence =
      QueryIntegerProperty<POSCategory>(_entities[16].properties[5]);

  /// see [POSCategory.excludePosIds]
  static final excludePosIds =
      QueryByteVectorProperty<POSCategory>(_entities[16].properties[6]);

  /// see [POSCategory.restaurantPrinterIds]
  static final restaurantPrinterIds =
      QueryByteVectorProperty<POSCategory>(_entities[16].properties[7]);

  /// see [POSCategory.invisibleInUi]
  static final invisibleInUi =
      QueryBooleanProperty<POSCategory>(_entities[16].properties[8]);

  /// see [POSCategory.websiteImage1920]
  static final websiteImage1920 =
      QueryStringProperty<POSCategory>(_entities[16].properties[9]);

  /// see [POSCategory.isPublished]
  static final isPublished =
      QueryBooleanProperty<POSCategory>(_entities[16].properties[10]);
}

/// [POSData] entity fields to define ObjectBox queries.
class POSData_ {
  /// see [POSData.id]
  static final id = QueryIntegerProperty<POSData>(_entities[17].properties[0]);

  /// see [POSData.odooId]
  static final odooId =
      QueryIntegerProperty<POSData>(_entities[17].properties[1]);

  /// see [POSData.name]
  static final name = QueryStringProperty<POSData>(_entities[17].properties[2]);

  /// see [POSData.posTypeId]
  static final posTypeId =
      QueryIntegerProperty<POSData>(_entities[17].properties[3]);

  /// see [POSData.isProductCaloriesActive]
  static final isProductCaloriesActive =
      QueryBooleanProperty<POSData>(_entities[17].properties[4]);

  /// see [POSData.header]
  static final header =
      QueryStringProperty<POSData>(_entities[17].properties[5]);

  /// see [POSData.footer]
  static final footer =
      QueryStringProperty<POSData>(_entities[17].properties[6]);

  /// see [POSData.discountProgramActive]
  static final discountProgramActive =
      QueryBooleanProperty<POSData>(_entities[17].properties[7]);

  /// see [POSData.discountProgramProductId]
  static final discountProgramProductId =
      QueryIntegerProperty<POSData>(_entities[17].properties[8]);

  /// see [POSData.allowPinCode]
  static final allowPinCode =
      QueryBooleanProperty<POSData>(_entities[17].properties[9]);

  /// see [POSData.pinCode]
  static final pinCode =
      QueryStringProperty<POSData>(_entities[17].properties[10]);

  /// see [POSData.orderTypeActive]
  static final orderTypeActive =
      QueryBooleanProperty<POSData>(_entities[17].properties[11]);

  /// see [POSData.defaultTypeOrderType]
  static final defaultTypeOrderType =
      QueryStringProperty<POSData>(_entities[17].properties[12]);

  /// see [POSData.pricelistId]
  static final pricelistId =
      QueryIntegerProperty<POSData>(_entities[17].properties[13]);

  /// see [POSData.ifaceTaxIncluded]
  static final ifaceTaxIncluded =
      QueryStringProperty<POSData>(_entities[17].properties[14]);

  /// see [POSData.manualDiscount]
  static final manualDiscount =
      QueryBooleanProperty<POSData>(_entities[17].properties[15]);

  /// see [POSData.restrictPriceControl]
  static final restrictPriceControl =
      QueryBooleanProperty<POSData>(_entities[17].properties[16]);

  /// see [POSData.usePricelist]
  static final usePricelist =
      QueryBooleanProperty<POSData>(_entities[17].properties[17]);

  /// see [POSData.modulePosDiscount]
  static final modulePosDiscount =
      QueryBooleanProperty<POSData>(_entities[17].properties[18]);

  /// see [POSData.discountProductId]
  static final discountProductId =
      QueryIntegerProperty<POSData>(_entities[17].properties[19]);

  /// see [POSData.discountPc]
  static final discountPc =
      QueryDoubleProperty<POSData>(_entities[17].properties[20]);

  /// see [POSData.allowSplitTable]
  static final allowSplitTable =
      QueryBooleanProperty<POSData>(_entities[17].properties[21]);

  /// see [POSData.allowTransferTable]
  static final allowTransferTable =
      QueryBooleanProperty<POSData>(_entities[17].properties[22]);

  /// see [POSData.branchId]
  static final branchId =
      QueryIntegerProperty<POSData>(_entities[17].properties[23]);

  /// see [POSData.modulePosRestaurant]
  static final modulePosRestaurant =
      QueryBooleanProperty<POSData>(_entities[17].properties[24]);

  /// see [POSData.isOrderPrinter]
  static final isOrderPrinter =
      QueryBooleanProperty<POSData>(_entities[17].properties[25]);

  /// see [POSData.companyId]
  static final companyId =
      QueryIntegerProperty<POSData>(_entities[17].properties[26]);
}

/// [POSGroup] entity fields to define ObjectBox queries.
class POSGroup_ {
  /// see [POSGroup.id]
  static final id = QueryIntegerProperty<POSGroup>(_entities[18].properties[0]);

  /// see [POSGroup.odooId]
  static final odooId =
      QueryIntegerProperty<POSGroup>(_entities[18].properties[1]);

  /// see [POSGroup.name]
  static final name =
      QueryStringProperty<POSGroup>(_entities[18].properties[2]);

  /// see [POSGroup.posRoleIds]
  static final posRoleIds =
      QueryByteVectorProperty<POSGroup>(_entities[18].properties[3]);

  /// see [POSGroup.posUserIds]
  static final posUserIds =
      QueryByteVectorProperty<POSGroup>(_entities[18].properties[4]);

  /// see [POSGroup.companyId]
  static final companyId =
      QueryIntegerProperty<POSGroup>(_entities[18].properties[5]);
}

/// [POSMultiSession] entity fields to define ObjectBox queries.
class POSMultiSession_ {
  /// see [POSMultiSession.id]
  static final id =
      QueryIntegerProperty<POSMultiSession>(_entities[19].properties[0]);

  /// see [POSMultiSession.odooId]
  static final odooId =
      QueryIntegerProperty<POSMultiSession>(_entities[19].properties[1]);

  /// see [POSMultiSession.name]
  static final name =
      QueryStringProperty<POSMultiSession>(_entities[19].properties[2]);

  /// see [POSMultiSession.posIds]
  static final posIds =
      QueryByteVectorProperty<POSMultiSession>(_entities[19].properties[3]);

  /// see [POSMultiSession.floorIds]
  static final floorIds =
      QueryByteVectorProperty<POSMultiSession>(_entities[19].properties[4]);

  /// see [POSMultiSession.tableBlocking]
  static final tableBlocking =
      QueryBooleanProperty<POSMultiSession>(_entities[19].properties[5]);

  /// see [POSMultiSession.multiSessionActive]
  static final multiSessionActive =
      QueryBooleanProperty<POSMultiSession>(_entities[19].properties[6]);

  /// see [POSMultiSession.syncServer]
  static final syncServer =
      QueryBooleanProperty<POSMultiSession>(_entities[19].properties[7]);

  /// see [POSMultiSession.fiscalPositionIds]
  static final fiscalPositionIds =
      QueryByteVectorProperty<POSMultiSession>(_entities[19].properties[8]);

  /// see [POSMultiSession.companyId]
  static final companyId =
      QueryIntegerProperty<POSMultiSession>(_entities[19].properties[9]);
}

/// [POSOrderType] entity fields to define ObjectBox queries.
class POSOrderType_ {
  /// see [POSOrderType.id]
  static final id =
      QueryIntegerProperty<POSOrderType>(_entities[20].properties[0]);

  /// see [POSOrderType.odooId]
  static final odooId =
      QueryIntegerProperty<POSOrderType>(_entities[20].properties[1]);

  /// see [POSOrderType.name]
  static final name =
      QueryStringProperty<POSOrderType>(_entities[20].properties[2]);

  /// see [POSOrderType.isShowCustomerInfo]
  static final isShowCustomerInfo =
      QueryBooleanProperty<POSOrderType>(_entities[20].properties[3]);

  /// see [POSOrderType.isRequireInformation]
  static final isRequireInformation =
      QueryBooleanProperty<POSOrderType>(_entities[20].properties[4]);

  /// see [POSOrderType.isRequireDriver]
  static final isRequireDriver =
      QueryBooleanProperty<POSOrderType>(_entities[20].properties[5]);

  /// see [POSOrderType.isAutoOpenTableScreen]
  static final isAutoOpenTableScreen =
      QueryBooleanProperty<POSOrderType>(_entities[20].properties[6]);

  /// see [POSOrderType.pricelistId]
  static final pricelistId =
      QueryIntegerProperty<POSOrderType>(_entities[20].properties[7]);

  /// see [POSOrderType.type]
  static final type =
      QueryStringProperty<POSOrderType>(_entities[20].properties[8]);

  /// see [POSOrderType.delivaryProductId]
  static final delivaryProductId =
      QueryIntegerProperty<POSOrderType>(_entities[20].properties[9]);

  /// see [POSOrderType.extraProductId]
  static final extraProductId =
      QueryIntegerProperty<POSOrderType>(_entities[20].properties[10]);

  /// see [POSOrderType.extraPercentage]
  static final extraPercentage =
      QueryDoubleProperty<POSOrderType>(_entities[20].properties[11]);

  /// see [POSOrderType.companyId]
  static final companyId =
      QueryIntegerProperty<POSOrderType>(_entities[20].properties[12]);

  /// see [POSOrderType.paymentMethodIds]
  static final paymentMethodIds =
      QueryByteVectorProperty<POSOrderType>(_entities[20].properties[13]);
}

/// [POSSecurityRole] entity fields to define ObjectBox queries.
class POSSecurityRole_ {
  /// see [POSSecurityRole.id]
  static final id =
      QueryIntegerProperty<POSSecurityRole>(_entities[21].properties[0]);

  /// see [POSSecurityRole.odooId]
  static final odooId =
      QueryIntegerProperty<POSSecurityRole>(_entities[21].properties[1]);

  /// see [POSSecurityRole.name]
  static final name =
      QueryStringProperty<POSSecurityRole>(_entities[21].properties[2]);

  /// see [POSSecurityRole.desc]
  static final desc =
      QueryStringProperty<POSSecurityRole>(_entities[21].properties[3]);

  /// see [POSSecurityRole.keyId]
  static final keyId =
      QueryIntegerProperty<POSSecurityRole>(_entities[21].properties[4]);

  /// see [POSSecurityRole.isDefaultValue]
  static final isDefaultValue =
      QueryBooleanProperty<POSSecurityRole>(_entities[21].properties[5]);

  /// see [POSSecurityRole.companyId]
  static final companyId =
      QueryIntegerProperty<POSSecurityRole>(_entities[21].properties[6]);
}

/// [POSType] entity fields to define ObjectBox queries.
class POSType_ {
  /// see [POSType.id]
  static final id = QueryIntegerProperty<POSType>(_entities[22].properties[0]);

  /// see [POSType.odooId]
  static final odooId =
      QueryIntegerProperty<POSType>(_entities[22].properties[1]);

  /// see [POSType.name]
  static final name = QueryStringProperty<POSType>(_entities[22].properties[2]);
}

/// [Pay] entity fields to define ObjectBox queries.
class Pay_ {
  /// see [Pay.id]
  static final id = QueryIntegerProperty<Pay>(_entities[23].properties[0]);

  /// see [Pay.odooId]
  static final odooId = QueryIntegerProperty<Pay>(_entities[23].properties[1]);

  /// see [Pay.cash]
  static final cash = QueryBooleanProperty<Pay>(_entities[23].properties[2]);

  /// see [Pay.bank]
  static final bank = QueryBooleanProperty<Pay>(_entities[23].properties[3]);

  /// see [Pay.others]
  static final others = QueryBooleanProperty<Pay>(_entities[23].properties[4]);

  /// see [Pay.money]
  static final money = QueryDoubleProperty<Pay>(_entities[23].properties[5]);

  /// see [Pay.change]
  static final change = QueryDoubleProperty<Pay>(_entities[23].properties[6]);

  /// see [Pay.aquirded]
  static final aquirded = QueryDoubleProperty<Pay>(_entities[23].properties[7]);

  /// see [Pay.type]
  static final type = QueryStringProperty<Pay>(_entities[23].properties[8]);

  /// see [Pay.order]
  static final order =
      QueryRelationToOne<Pay, Order1>(_entities[23].properties[9]);
}

/// [PaymentMethod] entity fields to define ObjectBox queries.
class PaymentMethod_ {
  /// see [PaymentMethod.id]
  static final id =
      QueryIntegerProperty<PaymentMethod>(_entities[24].properties[0]);

  /// see [PaymentMethod.odooId]
  static final odooId =
      QueryIntegerProperty<PaymentMethod>(_entities[24].properties[1]);

  /// see [PaymentMethod.name]
  static final name =
      QueryStringProperty<PaymentMethod>(_entities[24].properties[2]);

  /// see [PaymentMethod.methodType]
  static final methodType =
      QueryStringProperty<PaymentMethod>(_entities[24].properties[3]);

  /// see [PaymentMethod.identifyCustomer]
  static final identifyCustomer =
      QueryBooleanProperty<PaymentMethod>(_entities[24].properties[4]);

  /// see [PaymentMethod.jornalName]
  static final jornalName =
      QueryStringProperty<PaymentMethod>(_entities[24].properties[5]);

  /// see [PaymentMethod.odooJournalIDFromdb]
  static final odooJournalIDFromdb =
      QueryStringProperty<PaymentMethod>(_entities[24].properties[6]);
}

/// [PriceList] entity fields to define ObjectBox queries.
class PriceList_ {
  /// see [PriceList.id]
  static final id =
      QueryIntegerProperty<PriceList>(_entities[25].properties[0]);

  /// see [PriceList.odooId]
  static final odooId =
      QueryIntegerProperty<PriceList>(_entities[25].properties[1]);

  /// see [PriceList.name]
  static final name =
      QueryStringProperty<PriceList>(_entities[25].properties[2]);

  /// see [PriceList.countryGroupIds]
  static final countryGroupIds =
      QueryByteVectorProperty<PriceList>(_entities[25].properties[3]);

  /// see [PriceList.websiteId]
  static final websiteId =
      QueryIntegerProperty<PriceList>(_entities[25].properties[4]);

  /// see [PriceList.selectable]
  static final selectable =
      QueryBooleanProperty<PriceList>(_entities[25].properties[5]);

  /// see [PriceList.code]
  static final code =
      QueryStringProperty<PriceList>(_entities[25].properties[6]);
}

/// [Product] entity fields to define ObjectBox queries.
class Product_ {
  /// see [Product.id]
  static final id = QueryIntegerProperty<Product>(_entities[26].properties[0]);

  /// see [Product.odooId]
  static final odooId =
      QueryIntegerProperty<Product>(_entities[26].properties[1]);

  /// see [Product.name]
  static final name = QueryStringProperty<Product>(_entities[26].properties[2]);

  /// see [Product.image1920]
  static final image1920 =
      QueryStringProperty<Product>(_entities[26].properties[3]);

  /// see [Product.saleOk]
  static final saleOk =
      QueryBooleanProperty<Product>(_entities[26].properties[4]);

  /// see [Product.purchaseOk]
  static final purchaseOk =
      QueryBooleanProperty<Product>(_entities[26].properties[5]);

  /// see [Product.detailedType]
  static final detailedType =
      QueryStringProperty<Product>(_entities[26].properties[6]);

  /// see [Product.invoicePolicy]
  static final invoicePolicy =
      QueryStringProperty<Product>(_entities[26].properties[7]);

  /// see [Product.listPrice]
  static final listPrice =
      QueryDoubleProperty<Product>(_entities[26].properties[8]);

  /// see [Product.taxesId]
  static final taxesId =
      QueryByteVectorProperty<Product>(_entities[26].properties[9]);

  /// see [Product.standardPrice]
  static final standardPrice =
      QueryDoubleProperty<Product>(_entities[26].properties[10]);

  /// see [Product.defaultCode]
  static final defaultCode =
      QueryStringProperty<Product>(_entities[26].properties[11]);

  /// see [Product.barcode]
  static final barcode =
      QueryStringProperty<Product>(_entities[26].properties[12]);

  /// see [Product.categId]
  static final categId =
      QueryIntegerProperty<Product>(_entities[26].properties[13]);

  /// see [Product.companyId]
  static final companyId =
      QueryIntegerProperty<Product>(_entities[26].properties[14]);

  /// see [Product.branchId]
  static final branchId =
      QueryIntegerProperty<Product>(_entities[26].properties[15]);

  /// see [Product.accessoryProductIds]
  static final accessoryProductIds =
      QueryByteVectorProperty<Product>(_entities[26].properties[16]);

  /// see [Product.alternativeProductIds]
  static final alternativeProductIds =
      QueryByteVectorProperty<Product>(_entities[26].properties[17]);

  /// see [Product.availableInPos]
  static final availableInPos =
      QueryBooleanProperty<Product>(_entities[26].properties[18]);

  /// see [Product.invisibleInUi]
  static final invisibleInUi =
      QueryBooleanProperty<Product>(_entities[26].properties[19]);

  /// see [Product.toWeight]
  static final toWeight =
      QueryBooleanProperty<Product>(_entities[26].properties[20]);

  /// see [Product.posCategId]
  static final posCategId =
      QueryIntegerProperty<Product>(_entities[26].properties[21]);

  /// see [Product.websiteId]
  static final websiteId =
      QueryIntegerProperty<Product>(_entities[26].properties[22]);

  /// see [Product.websiteSequence]
  static final websiteSequence =
      QueryIntegerProperty<Product>(_entities[26].properties[23]);

  /// see [Product.publicCategIds]
  static final publicCategIds =
      QueryByteVectorProperty<Product>(_entities[26].properties[24]);

  /// see [Product.websiteRibbonId]
  static final websiteRibbonId =
      QueryIntegerProperty<Product>(_entities[26].properties[25]);

  /// see [Product.weight]
  static final weight =
      QueryDoubleProperty<Product>(_entities[26].properties[26]);

  /// see [Product.volume]
  static final volume =
      QueryDoubleProperty<Product>(_entities[26].properties[27]);

  /// see [Product.saleDelay]
  static final saleDelay =
      QueryDoubleProperty<Product>(_entities[26].properties[28]);

  /// see [Product.propertyAccountCreditorPriceDifference]
  static final propertyAccountCreditorPriceDifference =
      QueryDoubleProperty<Product>(_entities[26].properties[29]);

  /// see [Product.propertyAccountExpenseId]
  static final propertyAccountExpenseId =
      QueryIntegerProperty<Product>(_entities[26].properties[30]);

  /// see [Product.propertyAccountIncomeId]
  static final propertyAccountIncomeId =
      QueryIntegerProperty<Product>(_entities[26].properties[31]);

  /// see [Product.isDiscount]
  static final isDiscount =
      QueryBooleanProperty<Product>(_entities[26].properties[32]);

  /// see [Product.isExtra]
  static final isExtra =
      QueryBooleanProperty<Product>(_entities[26].properties[33]);

  /// see [Product.extraProducts]
  static final extraProducts =
      QueryByteVectorProperty<Product>(_entities[26].properties[34]);
}

/// [ProductCategory] entity fields to define ObjectBox queries.
class ProductCategory_ {
  /// see [ProductCategory.id]
  static final id =
      QueryIntegerProperty<ProductCategory>(_entities[27].properties[0]);

  /// see [ProductCategory.odooId]
  static final odooId =
      QueryIntegerProperty<ProductCategory>(_entities[27].properties[1]);

  /// see [ProductCategory.name]
  static final name =
      QueryStringProperty<ProductCategory>(_entities[27].properties[2]);

  /// see [ProductCategory.parentId]
  static final parentId =
      QueryIntegerProperty<ProductCategory>(_entities[27].properties[3]);

  /// see [ProductCategory.removalStrategyId]
  static final removalStrategyId =
      QueryIntegerProperty<ProductCategory>(_entities[27].properties[4]);

  /// see [ProductCategory.propertyCostMethod]
  static final propertyCostMethod =
      QueryStringProperty<ProductCategory>(_entities[27].properties[5]);

  /// see [ProductCategory.propertyValuation]
  static final propertyValuation =
      QueryStringProperty<ProductCategory>(_entities[27].properties[6]);

  /// see [ProductCategory.propertyAccountCreditorPriceDifferenceCateg]
  static final propertyAccountCreditorPriceDifferenceCateg =
      QueryStringProperty<ProductCategory>(_entities[27].properties[7]);

  /// see [ProductCategory.propertyAccountExpenseCategId]
  static final propertyAccountExpenseCategId =
      QueryIntegerProperty<ProductCategory>(_entities[27].properties[8]);

  /// see [ProductCategory.propertyAccountIncomeCategId]
  static final propertyAccountIncomeCategId =
      QueryIntegerProperty<ProductCategory>(_entities[27].properties[9]);

  /// see [ProductCategory.propertyStockAccountInputCategId]
  static final propertyStockAccountInputCategId =
      QueryIntegerProperty<ProductCategory>(_entities[27].properties[10]);

  /// see [ProductCategory.propertyStockAccountOutputCategId]
  static final propertyStockAccountOutputCategId =
      QueryIntegerProperty<ProductCategory>(_entities[27].properties[11]);

  /// see [ProductCategory.propertyStockValuationAccountId]
  static final propertyStockValuationAccountId =
      QueryIntegerProperty<ProductCategory>(_entities[27].properties[12]);
}

/// [ProductNote] entity fields to define ObjectBox queries.
class ProductNote_ {
  /// see [ProductNote.id]
  static final id =
      QueryIntegerProperty<ProductNote>(_entities[28].properties[0]);

  /// see [ProductNote.odooId]
  static final odooId =
      QueryIntegerProperty<ProductNote>(_entities[28].properties[1]);

  /// see [ProductNote.name]
  static final name =
      QueryStringProperty<ProductNote>(_entities[28].properties[2]);

  /// see [ProductNote.posCategoryIds]
  static final posCategoryIds =
      QueryByteVectorProperty<ProductNote>(_entities[28].properties[3]);
}

/// [Promotion] entity fields to define ObjectBox queries.
class Promotion_ {
  /// see [Promotion.id]
  static final id =
      QueryIntegerProperty<Promotion>(_entities[29].properties[0]);

  /// see [Promotion.odooId]
  static final odooId =
      QueryIntegerProperty<Promotion>(_entities[29].properties[1]);

  /// see [Promotion.name]
  static final name =
      QueryStringProperty<Promotion>(_entities[29].properties[2]);

  /// see [Promotion.active]
  static final active =
      QueryBooleanProperty<Promotion>(_entities[29].properties[3]);

  /// see [Promotion.startDate]
  static final startDate =
      QueryStringProperty<Promotion>(_entities[29].properties[4]);

  /// see [Promotion.endDate]
  static final endDate =
      QueryStringProperty<Promotion>(_entities[29].properties[5]);

  /// see [Promotion.amountTotal]
  static final amountTotal =
      QueryIntegerProperty<Promotion>(_entities[29].properties[6]);

  /// see [Promotion.type]
  static final type =
      QueryStringProperty<Promotion>(_entities[29].properties[7]);

  /// see [Promotion.method]
  static final method =
      QueryStringProperty<Promotion>(_entities[29].properties[8]);

  /// see [Promotion.discountFirstOrder]
  static final discountFirstOrder =
      QueryIntegerProperty<Promotion>(_entities[29].properties[9]);

  /// see [Promotion.productId]
  static final productId =
      QueryIntegerProperty<Promotion>(_entities[29].properties[10]);

  /// see [Promotion.discountOrderIds]
  static final discountOrderIds =
      QueryByteVectorProperty<Promotion>(_entities[29].properties[11]);

  /// see [Promotion.discountEcommerceCategoryIds]
  static final discountEcommerceCategoryIds =
      QueryByteVectorProperty<Promotion>(_entities[29].properties[12]);

  /// see [Promotion.discountQuantityIds]
  static final discountQuantityIds =
      QueryByteVectorProperty<Promotion>(_entities[29].properties[13]);

  /// see [Promotion.giftConditionIds]
  static final giftConditionIds =
      QueryByteVectorProperty<Promotion>(_entities[29].properties[14]);

  /// see [Promotion.giftFreeIds]
  static final giftFreeIds =
      QueryByteVectorProperty<Promotion>(_entities[29].properties[15]);

  /// see [Promotion.discountConditionIds]
  static final discountConditionIds =
      QueryByteVectorProperty<Promotion>(_entities[29].properties[16]);

  /// see [Promotion.discountApplyIds]
  static final discountApplyIds =
      QueryByteVectorProperty<Promotion>(_entities[29].properties[17]);

  /// see [Promotion.priceIds]
  static final priceIds =
      QueryByteVectorProperty<Promotion>(_entities[29].properties[18]);

  /// see [Promotion.specialCategoryIds]
  static final specialCategoryIds =
      QueryByteVectorProperty<Promotion>(_entities[29].properties[19]);

  /// see [Promotion.discountLowestPrice]
  static final discountLowestPrice =
      QueryIntegerProperty<Promotion>(_entities[29].properties[20]);

  /// see [Promotion.multiBuyIds]
  static final multiBuyIds =
      QueryByteVectorProperty<Promotion>(_entities[29].properties[21]);

  /// see [Promotion.productIds]
  static final productIds =
      QueryByteVectorProperty<Promotion>(_entities[29].properties[22]);

  /// see [Promotion.minimumItems]
  static final minimumItems =
      QueryIntegerProperty<Promotion>(_entities[29].properties[23]);

  /// see [Promotion.specialCustomerIds]
  static final specialCustomerIds =
      QueryByteVectorProperty<Promotion>(_entities[29].properties[24]);

  /// see [Promotion.promotionBirthday]
  static final promotionBirthday =
      QueryBooleanProperty<Promotion>(_entities[29].properties[25]);

  /// see [Promotion.promotionBirthdayType]
  static final promotionBirthdayType =
      QueryStringProperty<Promotion>(_entities[29].properties[26]);

  /// see [Promotion.promotionGroup]
  static final promotionGroup =
      QueryBooleanProperty<Promotion>(_entities[29].properties[27]);

  /// see [Promotion.promotionGroupIds]
  static final promotionGroupIds =
      QueryByteVectorProperty<Promotion>(_entities[29].properties[28]);

  /// see [Promotion.state]
  static final state =
      QueryStringProperty<Promotion>(_entities[29].properties[29]);

  /// see [Promotion.specialDays]
  static final specialDays =
      QueryBooleanProperty<Promotion>(_entities[29].properties[30]);

  /// see [Promotion.monday]
  static final monday =
      QueryBooleanProperty<Promotion>(_entities[29].properties[31]);

  /// see [Promotion.tuesday]
  static final tuesday =
      QueryBooleanProperty<Promotion>(_entities[29].properties[32]);

  /// see [Promotion.wednesday]
  static final wednesday =
      QueryBooleanProperty<Promotion>(_entities[29].properties[33]);

  /// see [Promotion.thursday]
  static final thursday =
      QueryBooleanProperty<Promotion>(_entities[29].properties[34]);

  /// see [Promotion.friday]
  static final friday =
      QueryBooleanProperty<Promotion>(_entities[29].properties[35]);

  /// see [Promotion.saturday]
  static final saturday =
      QueryBooleanProperty<Promotion>(_entities[29].properties[36]);

  /// see [Promotion.sunday]
  static final sunday =
      QueryBooleanProperty<Promotion>(_entities[29].properties[37]);

  /// see [Promotion.specialTimes]
  static final specialTimes =
      QueryBooleanProperty<Promotion>(_entities[29].properties[38]);

  /// see [Promotion.fromTime]
  static final fromTime =
      QueryIntegerProperty<Promotion>(_entities[29].properties[39]);

  /// see [Promotion.toTime]
  static final toTime =
      QueryIntegerProperty<Promotion>(_entities[29].properties[40]);

  /// see [Promotion.branchId]
  static final branchId =
      QueryIntegerProperty<Promotion>(_entities[29].properties[41]);
}

/// [RestaurantPrinter] entity fields to define ObjectBox queries.
class RestaurantPrinter_ {
  /// see [RestaurantPrinter.id]
  static final id =
      QueryIntegerProperty<RestaurantPrinter>(_entities[30].properties[0]);

  /// see [RestaurantPrinter.odooId]
  static final odooId =
      QueryIntegerProperty<RestaurantPrinter>(_entities[30].properties[1]);

  /// see [RestaurantPrinter.name]
  static final name =
      QueryStringProperty<RestaurantPrinter>(_entities[30].properties[2]);

  /// see [RestaurantPrinter.printerType]
  static final printerType =
      QueryStringProperty<RestaurantPrinter>(_entities[30].properties[3]);

  /// see [RestaurantPrinter.proxyIp]
  static final proxyIp =
      QueryStringProperty<RestaurantPrinter>(_entities[30].properties[4]);

  /// see [RestaurantPrinter.epsonPrinterIp]
  static final epsonPrinterIp =
      QueryStringProperty<RestaurantPrinter>(_entities[30].properties[5]);

  /// see [RestaurantPrinter.posOrderTypeIds]
  static final posOrderTypeIds =
      QueryByteVectorProperty<RestaurantPrinter>(_entities[30].properties[6]);

  /// see [RestaurantPrinter.posConfigIds]
  static final posConfigIds =
      QueryByteVectorProperty<RestaurantPrinter>(_entities[30].properties[7]);

  /// see [RestaurantPrinter.productCategoriesIds]
  static final productCategoriesIds =
      QueryByteVectorProperty<RestaurantPrinter>(_entities[30].properties[8]);
}

/// [ReturnReason] entity fields to define ObjectBox queries.
class ReturnReason_ {
  /// see [ReturnReason.id]
  static final id =
      QueryIntegerProperty<ReturnReason>(_entities[31].properties[0]);

  /// see [ReturnReason.odooId]
  static final odooId =
      QueryIntegerProperty<ReturnReason>(_entities[31].properties[1]);

  /// see [ReturnReason.name]
  static final name =
      QueryStringProperty<ReturnReason>(_entities[31].properties[2]);

  /// see [ReturnReason.companyName]
  static final companyName =
      QueryStringProperty<ReturnReason>(_entities[31].properties[3]);
}

/// [ScrapReasons] entity fields to define ObjectBox queries.
class ScrapReasons_ {
  /// see [ScrapReasons.id]
  static final id =
      QueryIntegerProperty<ScrapReasons>(_entities[32].properties[0]);

  /// see [ScrapReasons.odooId]
  static final odooId =
      QueryIntegerProperty<ScrapReasons>(_entities[32].properties[1]);

  /// see [ScrapReasons.shortName]
  static final shortName =
      QueryStringProperty<ScrapReasons>(_entities[32].properties[2]);

  /// see [ScrapReasons.desc]
  static final desc =
      QueryStringProperty<ScrapReasons>(_entities[32].properties[3]);
}

/// [Table] entity fields to define ObjectBox queries.
class Table_ {
  /// see [Table.id]
  static final id = QueryIntegerProperty<Table>(_entities[33].properties[0]);

  /// see [Table.odooId]
  static final odooId =
      QueryIntegerProperty<Table>(_entities[33].properties[1]);

  /// see [Table.name]
  static final name = QueryStringProperty<Table>(_entities[33].properties[2]);

  /// see [Table.seats]
  static final seats = QueryIntegerProperty<Table>(_entities[33].properties[3]);

  /// see [Table.floorId]
  static final floorId =
      QueryIntegerProperty<Table>(_entities[33].properties[4]);

  /// see [Table.locked]
  static final locked =
      QueryBooleanProperty<Table>(_entities[33].properties[5]);

  /// see [Table.shape]
  static final shape = QueryStringProperty<Table>(_entities[33].properties[6]);
}

/// [TableId] entity fields to define ObjectBox queries.
class TableId_ {
  /// see [TableId.odooId]
  static final odooId =
      QueryIntegerProperty<TableId>(_entities[34].properties[0]);

  /// see [TableId.id]
  static final id = QueryIntegerProperty<TableId>(_entities[34].properties[1]);

  /// see [TableId.name]
  static final name = QueryStringProperty<TableId>(_entities[34].properties[2]);

  /// see [TableId.seats]
  static final seats =
      QueryIntegerProperty<TableId>(_entities[34].properties[3]);

  /// see [TableId.barcodeUrl]
  static final barcodeUrl =
      QueryStringProperty<TableId>(_entities[34].properties[4]);

  /// see [TableId.qrImage]
  static final qrImage =
      QueryStringProperty<TableId>(_entities[34].properties[5]);

  /// see [TableId.pricelistId]
  static final pricelistId =
      QueryIntegerProperty<TableId>(_entities[34].properties[6]);

  /// see [TableId.locked]
  static final locked =
      QueryBooleanProperty<TableId>(_entities[34].properties[7]);

  /// see [TableId.userIds]
  static final userIds =
      QueryByteVectorProperty<TableId>(_entities[34].properties[8]);

  /// see [TableId.shape]
  static final shape =
      QueryStringProperty<TableId>(_entities[34].properties[9]);

  /// see [TableId.color]
  static final color =
      QueryStringProperty<TableId>(_entities[34].properties[10]);

  /// see [TableId.positionH]
  static final positionH =
      QueryDoubleProperty<TableId>(_entities[34].properties[11]);

  /// see [TableId.positionV]
  static final positionV =
      QueryDoubleProperty<TableId>(_entities[34].properties[12]);

  /// see [TableId.width]
  static final width =
      QueryDoubleProperty<TableId>(_entities[34].properties[13]);

  /// see [TableId.height]
  static final height =
      QueryDoubleProperty<TableId>(_entities[34].properties[14]);

  /// see [TableId.floor]
  static final floor =
      QueryRelationToOne<TableId, Floor>(_entities[34].properties[15]);

  /// see [TableId.chosen]
  static final chosen =
      QueryBooleanProperty<TableId>(_entities[34].properties[16]);
}

/// [Tax] entity fields to define ObjectBox queries.
class Tax_ {
  /// see [Tax.id]
  static final id = QueryIntegerProperty<Tax>(_entities[35].properties[0]);

  /// see [Tax.odooId]
  static final odooId = QueryIntegerProperty<Tax>(_entities[35].properties[1]);

  /// see [Tax.name]
  static final name = QueryStringProperty<Tax>(_entities[35].properties[2]);

  /// see [Tax.typeTaxUse]
  static final typeTaxUse =
      QueryStringProperty<Tax>(_entities[35].properties[3]);

  /// see [Tax.taxScope]
  static final taxScope = QueryStringProperty<Tax>(_entities[35].properties[4]);

  /// see [Tax.companyId]
  static final companyId =
      QueryIntegerProperty<Tax>(_entities[35].properties[5]);

  /// see [Tax.amountType]
  static final amountType =
      QueryStringProperty<Tax>(_entities[35].properties[6]);

  /// see [Tax.amount]
  static final amount = QueryDoubleProperty<Tax>(_entities[35].properties[7]);

  /// see [Tax.description]
  static final description =
      QueryStringProperty<Tax>(_entities[35].properties[8]);

  /// see [Tax.priceInclude]
  static final priceInclude =
      QueryBooleanProperty<Tax>(_entities[35].properties[9]);

  /// see [Tax.taxGroupId]
  static final taxGroupId =
      QueryIntegerProperty<Tax>(_entities[35].properties[10]);

  /// see [Tax.analytic]
  static final analytic =
      QueryBooleanProperty<Tax>(_entities[35].properties[11]);

  /// see [Tax.countryId]
  static final countryId =
      QueryIntegerProperty<Tax>(_entities[35].properties[12]);

  /// see [Tax.includeBaseAmount]
  static final includeBaseAmount =
      QueryBooleanProperty<Tax>(_entities[35].properties[13]);

  /// see [Tax.isBaseAffected]
  static final isBaseAffected =
      QueryBooleanProperty<Tax>(_entities[35].properties[14]);

  /// see [Tax.childrenTaxIds]
  static final childrenTaxIds =
      QueryByteVectorProperty<Tax>(_entities[35].properties[15]);

  /// see [Tax.invoiceRepartitionLineIds]
  static final invoiceRepartitionLineIds =
      QueryByteVectorProperty<Tax>(_entities[35].properties[16]);

  /// see [Tax.refundRepartitionLineIds]
  static final refundRepartitionLineIds =
      QueryByteVectorProperty<Tax>(_entities[35].properties[17]);
}

/// [User] entity fields to define ObjectBox queries.
class User_ {
  /// see [User.id]
  static final id = QueryIntegerProperty<User>(_entities[36].properties[0]);

  /// see [User.odooId]
  static final odooId = QueryIntegerProperty<User>(_entities[36].properties[1]);

  /// see [User.name]
  static final name = QueryStringProperty<User>(_entities[36].properties[2]);

  /// see [User.login]
  static final login = QueryStringProperty<User>(_entities[36].properties[3]);

  /// see [User.securityPin]
  static final securityPin =
      QueryStringProperty<User>(_entities[36].properties[4]);

  /// see [User.posUserType]
  static final posUserType =
      QueryStringProperty<User>(_entities[36].properties[5]);

  /// see [User.image]
  static final image = QueryStringProperty<User>(_entities[36].properties[6]);

  /// see [User.posSecurityGroupIds]
  static final posSecurityGroupIds =
      QueryByteVectorProperty<User>(_entities[36].properties[7]);

  /// see [User.companyIds]
  static final companyIds =
      QueryByteVectorProperty<User>(_entities[36].properties[8]);

  /// see [User.pos]
  static final pos = QueryRelationToOne<User, POS>(_entities[36].properties[9]);
}

/// [Branch1] entity fields to define ObjectBox queries.
class Branch1_ {
  /// see [Branch1.odooId]
  static final odooId =
      QueryIntegerProperty<Branch1>(_entities[37].properties[0]);

  /// see [Branch1.id]
  static final id = QueryIntegerProperty<Branch1>(_entities[37].properties[1]);

  /// see [Branch1.name]
  static final name = QueryStringProperty<Branch1>(_entities[37].properties[2]);

  /// see [Branch1.telephone]
  static final telephone =
      QueryStringProperty<Branch1>(_entities[37].properties[3]);

  /// see [Branch1.address]
  static final address =
      QueryStringProperty<Branch1>(_entities[37].properties[4]);

  /// see [Branch1.companyId]
  static final companyId =
      QueryIntegerProperty<Branch1>(_entities[37].properties[5]);

  /// see [Branch1.journalID]
  static final journalID =
      QueryRelationToOne<Branch1, JournalID>(_entities[37].properties[6]);
}

/// [Session1] entity fields to define ObjectBox queries.
class Session1_ {
  /// see [Session1.id]
  static final id = QueryIntegerProperty<Session1>(_entities[38].properties[0]);

  /// see [Session1.odooId]
  static final odooId =
      QueryIntegerProperty<Session1>(_entities[38].properties[1]);

  /// see [Session1.dbLink]
  static final dbLink =
      QueryStringProperty<Session1>(_entities[38].properties[2]);

  /// see [Session1.posName]
  static final posName =
      QueryStringProperty<Session1>(_entities[38].properties[3]);

  /// see [Session1.sessionOpenedBy]
  static final sessionOpenedBy =
      QueryStringProperty<Session1>(_entities[38].properties[4]);

  /// see [Session1.sessionNumber]
  static final sessionNumber =
      QueryIntegerProperty<Session1>(_entities[38].properties[5]);

  /// see [Session1.sessionStatus]
  static final sessionStatus =
      QueryStringProperty<Session1>(_entities[38].properties[6]);

  /// see [Session1.workingDate]
  static final workingDate =
      QueryStringProperty<Session1>(_entities[38].properties[7]);

  /// see [Session1.sessionStartTime]
  static final sessionStartTime =
      QueryStringProperty<Session1>(_entities[38].properties[8]);

  /// see [Session1.sessionEndTime]
  static final sessionEndTime =
      QueryStringProperty<Session1>(_entities[38].properties[9]);

  /// see [Session1.startingCredit]
  static final startingCredit =
      QueryIntegerProperty<Session1>(_entities[38].properties[10]);

  /// see [Session1.endingCredit]
  static final endingCredit =
      QueryIntegerProperty<Session1>(_entities[38].properties[11]);

  /// see [Session1.version]
  static final version =
      QueryStringProperty<Session1>(_entities[38].properties[12]);

  /// see [Session1.userName]
  static final userName =
      QueryStringProperty<Session1>(_entities[38].properties[13]);
}
